import requests
try:
    import websocket
except ImportError:
    print("Warning: websocket-client not installed. Some features may not work.")
    websocket = None
import json
import uuid
import time
import threading
from typing import List, Dict, Optional
from pathlib import Path
import base64
from config import Config
import gc

# Â∞ùËØïÂØºÂÖ•psutilÔºåÂ¶ÇÊûúÂ§±Ë¥•ÂàôËÆæÁΩÆ‰∏∫None
try:
    import psutil
except ImportError:
    psutil = None
    print("Warning: psutil not installed. System resource monitoring will be disabled.")


class ComfyUIService:
    def __init__(self):
        self.host = Config.COMFYUI_HOST
        self.port = Config.COMFYUI_PORT

        self.base_url = Config.COMFYUI_URL
        self.client_id = str(uuid.uuid4())
        
    def _check_system_resources(self):
        """Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê‰ΩøÁî®ÊÉÖÂÜµÂπ∂‰ºòÂåñ"""
        # Â¶ÇÊûúpsutil‰∏çÂèØÁî®ÔºåË∑≥ËøáËµÑÊ∫êÊ£ÄÊü•
        if psutil is None:
            print("‚ö†Ô∏è Á≥ªÁªüËµÑÊ∫êÁõëÊéß‰∏çÂèØÁî® (Áº∫Â∞ëpsutilÊ®°Âùó)")
            return None
            
        try:
            # Ëé∑ÂèñÂÜÖÂ≠ò‰ø°ÊÅØ
            memory = psutil.virtual_memory()
            memory_percent = memory.percent
            available_memory_gb = memory.available / (1024**3)
            
            # Ëé∑ÂèñCPU‰ø°ÊÅØ
            cpu_percent = psutil.cpu_percent(interval=1)
            
            print(f"üìä Á≥ªÁªüËµÑÊ∫ê‰ΩøÁî®ÊÉÖÂÜµ:")
            print(f"  CPU‰ΩøÁî®Áéá: {cpu_percent:.1f}%")
            print(f"  ÂÜÖÂ≠ò‰ΩøÁî®Áéá: {memory_percent:.1f}%")
            print(f"  ÂèØÁî®ÂÜÖÂ≠ò: {available_memory_gb:.2f}GB")
            
            # Â¶ÇÊûúÂÜÖÂ≠ò‰ΩøÁî®ÁéáËøáÈ´òÔºåËß¶ÂèëÂûÉÂúæÂõûÊî∂
            if memory_percent > 85:  # Èôç‰ΩéÈòàÂÄºÂà∞85%
                print("‚ö†Ô∏è ÂÜÖÂ≠ò‰ΩøÁî®ÁéáËæÉÈ´òÔºåËß¶ÂèëÂûÉÂúæÂõûÊî∂...")
                gc.collect()
                time.sleep(2)  # Á≠âÂæÖÂõûÊî∂ÂÆåÊàê
                
                # ÈáçÊñ∞Ê£ÄÊü•ÂÜÖÂ≠ò
                memory = psutil.virtual_memory()
                print(f"  ÂõûÊî∂ÂêéÂÜÖÂ≠ò‰ΩøÁî®Áéá: {memory.percent:.1f}%")
                
            # Â¶ÇÊûúÂÜÖÂ≠ò‰ΩøÁî®ÁéáËøáÈ´òÔºåÁªôÂá∫Ë≠¶Âëä
            if memory_percent > 90:
                print("üö® ÂÜÖÂ≠ò‰ΩøÁî®ÁéáËøáÈ´òÔºåÂª∫ËÆÆÈáçÂêØComfyUIÊúçÂä°!")
                
                # Â∞ùËØï‰ºòÂåñÔºöÂº∫Âà∂ÈáäÊîæÊõ¥Â§öËµÑÊ∫ê
                if memory_percent > 95:
                    print("‚ö†Ô∏è ÂÜÖÂ≠ò‰ΩøÁî®ÁéáÊûÅÈ´òÔºåÊâßË°åÁ¥ßÊÄ•‰ºòÂåñÊé™ÊñΩ...")
                    # Ê∏ÖÁêÜPythonÂûÉÂúæ
                    gc.collect()
                    gc.collect()  # ÂèåÈáçÂûÉÂúæÂõûÊî∂
                    
                    # Ê∏ÖÁêÜÁ≥ªÁªüÁºìÂ≠òÔºàÂ¶ÇÊûúÂèØËÉΩÔºâ
                    try:
                        import os
                        if hasattr(os, 'system') and os.name == 'nt':  # Windows
                            # WindowsÊ∏ÖÁêÜÂÜÖÂ≠òÂëΩ‰ª§
                            os.system('echo 1 > nul')  # Á©∫Êìç‰ΩúÔºå‰ΩÜÂèØËÉΩËß¶Âèë‰∏Ä‰∫õÊ∏ÖÁêÜ
                    except:
                        pass
                    
                    # ‰ΩøÁî®Â¢ûÂº∫ÁöÑËµÑÊ∫ê‰ºòÂåñÂô®
                    try:
                        from .resource_optimizer import resource_optimizer
                        resource_optimizer.force_cleanup()
                    except ImportError:
                        print("‚ö†Ô∏è ËµÑÊ∫ê‰ºòÂåñÂô®‰∏çÂèØÁî®")
                
            return {
                'cpu_percent': cpu_percent,
                'memory_percent': memory_percent,
                'available_memory_gb': available_memory_gb
            }
        except Exception as e:
            print(f"‚ö†Ô∏è Êó†Ê≥ïËé∑ÂèñÁ≥ªÁªüËµÑÊ∫ê‰ø°ÊÅØ: {e}")
            return None
    
    def check_connection(self) -> bool:
        """Ê£ÄÊü•ComfyUIÊúçÂä°ËøûÊé•"""
        try:
            response = requests.get(f"{self.base_url}/system_stats", timeout=5)
            if response.status_code == 200:
                # Â∞ùËØïËé∑ÂèñComfyUIÁöÑÁ≥ªÁªü‰ø°ÊÅØ
                try:
                    stats = response.json()
                    print(f"ComfyUIÁ≥ªÁªü‰ø°ÊÅØ: {stats}")
                except:
                    pass
                
                # Â∞ùËØïËé∑ÂèñComfyUIÁöÑËæìÂÖ•ÁõÆÂΩï‰ø°ÊÅØ
                try:
                    info_response = requests.get(f"{self.base_url}/object_info", timeout=5)
                    if info_response.status_code == 200:
                        object_info = info_response.json()
                        # Êü•ÊâæLoadImageËäÇÁÇπÁöÑ‰ø°ÊÅØ
                        if "LoadImage" in object_info:
                            load_image_info = object_info["LoadImage"]
                            print(f"LoadImageËäÇÁÇπ‰ø°ÊÅØ: {load_image_info}")
                except Exception as e:
                    print(f"Ëé∑ÂèñÂØπË±°‰ø°ÊÅØÂ§±Ë¥•: {str(e)}")
                
                return True
            return False
        except Exception as e:
            print(f"ComfyUIËøûÊé•Ê£ÄÊü•Â§±Ë¥•: {str(e)}")
            # Â¶ÇÊûúËøûÊé•Â§±Ë¥•ÔºåÂ∞ùËØïÈáçÂêØÊúçÂä°ÊàñÁ≠âÂæÖÊÅ¢Â§ç
            return False

    def load_workflow(self, workflow_path: Path) -> Dict:
        """Âä†ËΩΩÂ∑•‰ΩúÊµÅÊñá‰ª∂"""
        try:
            with open(workflow_path, 'r', encoding='utf-8') as f:
                workflow_data = json.load(f)
            
            # Ê£ÄÊü•ÊòØÂê¶ÊòØComfyUIÈ°πÁõÆÊñá‰ª∂Ê†ºÂºèÔºàÂåÖÂê´'nodes'Â≠óÊÆµÔºâ
            if 'nodes' in workflow_data:
                print(f"Ê£ÄÊµãÂà∞ComfyUIÈ°πÁõÆÊñá‰ª∂Ê†ºÂºèÔºåËΩ¨Êç¢‰∏∫Ê†áÂáÜÂ∑•‰ΩúÊµÅÊ†ºÂºè")
                return self._convert_project_to_workflow(workflow_data)
            else:
                # Â∑≤ÁªèÊòØÊ†áÂáÜÂ∑•‰ΩúÊµÅÊ†ºÂºè
                return workflow_data
                
        except Exception as e:
            raise Exception(f"Âä†ËΩΩÂ∑•‰ΩúÊµÅÂ§±Ë¥•: {str(e)}")
    
    def _convert_project_to_workflow(self, project_data: Dict) -> Dict:
        """Â∞ÜComfyUIÈ°πÁõÆÊñá‰ª∂ËΩ¨Êç¢‰∏∫Ê†áÂáÜÂ∑•‰ΩúÊµÅÊ†ºÂºè"""
        workflow = {}
        
        nodes = project_data.get('nodes', [])
        
        for node in nodes:
            node_id = str(node.get('id', ''))
            if not node_id:
                continue
                
            # Ëé∑ÂèñËäÇÁÇπÁ±ªÂûã
            node_type = node.get('type', '')
            if not node_type:
                continue
            
            # Ëé∑ÂèñËæìÂÖ•ÂèÇÊï∞
            inputs = {}
            
            # ‰ªé widgets_valuesËé∑ÂèñÂÄº
            widget_values = node.get('widgets_values', [])
            node_inputs = node.get('inputs', [])
            
            # Ê†πÊçÆËäÇÁÇπÁ±ªÂûãËÆæÁΩÆÈªòËÆ§ÂèÇÊï∞
            if node_type == "LoadImage":
                if len(widget_values) > 0:
                    inputs["image"] = widget_values[0]
            elif node_type == "CLIPTextEncode":
                if len(widget_values) > 0:
                    inputs["text"] = widget_values[0]
            elif node_type == "CheckpointLoaderSimple":
                if len(widget_values) > 0:
                    inputs["ckpt_name"] = widget_values[0]
            elif node_type == "VAELoader":
                if len(widget_values) > 0:
                    inputs["vae_name"] = widget_values[0]
            elif node_type == "CLIPVisionLoader":
                if len(widget_values) > 0:
                    inputs["clip_name"] = widget_values[0]
            elif node_type == "KSampler":
                if len(widget_values) >= 6:
                    inputs.update({
                        "seed": widget_values[0],
                        "control_after_generate": widget_values[1],
                        "steps": widget_values[2],
                        "cfg": widget_values[3],
                        "sampler_name": widget_values[4],
                        "scheduler": widget_values[5],
                        "denoise": widget_values[6] if len(widget_values) > 6 else 1.0
                    })
            elif node_type == "WanImageToVideo":
                if len(widget_values) >= 4:
                    inputs.update({
                        "width": widget_values[0],
                        "height": widget_values[1],
                        "length": widget_values[2],
                        "batch_size": widget_values[3]
                    })
            elif node_type == "VHS_VideoCombine":
                if len(widget_values) > 0 and isinstance(widget_values[0], dict):
                    video_params = widget_values[0]
                    inputs.update({
                        "frame_rate": video_params.get("frame_rate", 18),
                        "loop_count": video_params.get("loop_count", 0),
                        "filename_prefix": video_params.get("filename_prefix", "video"),
                        "format": video_params.get("format", "video/h264-mp4"),
                        "save_output": video_params.get("save_output", True)
                    })
            
            # Â§ÑÁêÜËøûÊé•ÂÖ≥Á≥ª
            for input_def in node_inputs:
                input_name = input_def.get('name', '')
                input_link = input_def.get('link')
                if input_link is not None:
                    # Êü•ÊâæÈìæÊé•ÁöÑÊ∫êËäÇÁÇπ
                    source_info = self._find_link_source(project_data.get('links', []), input_link)
                    if source_info:
                        inputs[input_name] = source_info
            
            workflow[node_id] = {
                "class_type": node_type,
                "inputs": inputs
            }
            
            # Ê∑ªÂä†Ê†áÈ¢ò‰ø°ÊÅØ
            if 'title' in node:
                workflow[node_id]["_meta"] = {"title": node['title']}
        
        return workflow
    
    def _find_link_source(self, links: list, link_id: int) -> list:
        """Êü•ÊâæÈìæÊé•ÁöÑÊ∫êËäÇÁÇπ"""
        for link in links:
            if len(link) >= 3 and link[0] == link_id:
                # link Ê†ºÂºè: [link_id, source_node_id, source_slot, target_node_id, target_slot, type]
                return [str(link[1]), link[2]]  # [source_node_id, source_slot]
        return None
    
    def _create_placeholder_image(self, image_path: Path, text: str):
        """ÂàõÂª∫Âç†‰ΩçÁ¨¶ÂõæÁâá"""
        try:
            from PIL import Image, ImageDraw, ImageFont
            
            # ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÂç†‰ΩçÁ¨¶ÂõæÁâá
            width, height = 512, 512
            image = Image.new('RGB', (width, height), color='lightgray')
            draw = ImageDraw.Draw(image)
            
            # Â∞ùËØï‰ΩøÁî®ÈªòËÆ§Â≠ó‰Ωì
            try:
                font = ImageFont.truetype("arial.ttf", 24)
            except:
                font = ImageFont.load_default()
            
            # ËÆ°ÁÆóÊñáÊú¨‰ΩçÁΩÆ
            text_bbox = draw.textbbox((0, 0), text, font=font)
            text_width = text_bbox[2] - text_bbox[0]
            text_height = text_bbox[3] - text_bbox[1]
            
            x = (width - text_width) // 2
            y = (height - text_height) // 2
            
            # ÁªòÂà∂ÊñáÊú¨
            draw.text((x, y), text, fill='black', font=font)
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            image_path.parent.mkdir(parents=True, exist_ok=True)
            
            # ‰øùÂ≠òÂõæÁâá
            image.save(image_path, 'JPEG')
            print(f"‚úÖ ÂàõÂª∫Âç†‰ΩçÁ¨¶ÂõæÁâá: {image_path}")
            
        except ImportError:
            print(f"‚ö†Ô∏è PILÂ∫ìÊú™ÂÆâË£ÖÔºå‰ΩøÁî®ÁÆÄÂçïÂç†‰ΩçÁ¨¶")
            self._create_simple_placeholder(image_path, text)
        except Exception as e:
            print(f"‚ö†Ô∏è ÂàõÂª∫Âç†‰ΩçÁ¨¶ÂõæÁâáÂ§±Ë¥•: {str(e)}")
            self._create_simple_placeholder(image_path, text)
    
    def _create_simple_placeholder(self, image_path: Path, text: str):
        """ÂàõÂª∫ÁÆÄÂçïÁöÑÊñáÊú¨Âç†‰ΩçÁ¨¶Êñá‰ª∂"""
        try:
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            image_path.parent.mkdir(parents=True, exist_ok=True)
            
            # ÂàõÂª∫‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊñáÊú¨Êñá‰ª∂‰Ωú‰∏∫Âç†‰ΩçÁ¨¶
            placeholder_text = f"Âç†‰ΩçÁ¨¶ÂõæÁâá: {text}\nÁîüÊàêÊó∂Èó¥: {time.strftime('%Y-%m-%d %H:%M:%S')}"
            
            # ‰øÆÊîπÊâ©Â±ïÂêç‰∏∫.txt
            txt_path = image_path.with_suffix('.txt')
            with open(txt_path, 'w', encoding='utf-8') as f:
                f.write(placeholder_text)
            
            print(f"‚úÖ ÂàõÂª∫ÁÆÄÂçïÂç†‰ΩçÁ¨¶: {txt_path}")
            
        except Exception as e:
            print(f"‚ùå ÂàõÂª∫Âç†‰ΩçÁ¨¶Â§±Ë¥•: {str(e)}")

    def generate_single_image(self, prompt: str, filename: str = None, max_retries: int = 3) -> Optional[str]:
        """ÁîüÊàêÂçïÂº†ÂõæÁâá - Â∏¶ÈáçËØïÊú∫Âà∂Ôºå‰∏ìÁî®‰∫éÁºñËæëÊèêÁ§∫ËØçÈáçÊñ∞ÁîüÊàê"""
        if not filename:
            import time
            timestamp = int(time.time() * 1000)
            filename = f"single_{timestamp:03d}"
        
        print(f"üé® ÁîüÊàêÂçïÂº†ÂõæÁâá...")
        print(f"üìÅ ‰ΩøÁî®Â∑•‰ΩúÊµÅ: {Config.IMAGE_WORKFLOW}")
        print(f"üìù ÊèêÁ§∫ËØç: {prompt}")
        print(f"üîÑ ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞: {max_retries}")
        
        last_error = None
        
        # ÈáçËØïÊú∫Âà∂
        for retry in range(max_retries + 1):
            try:
                if retry > 0:
                    print(f"üîÑ Á¨¨{retry}Ê¨°ÈáçËØï (ÂÖ±{max_retries}Ê¨°)...")
                    import time
                    time.sleep(2 * retry)  # ÈÄêÊ∏êÂ¢ûÂä†Á≠âÂæÖÊó∂Èó¥
                
                # Ê£ÄÊü•ComfyUIËøûÊé•Áä∂ÊÄÅ
                if not self.check_connection():
                    raise Exception("ComfyUIÊúçÂä°ËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å")
                
                # Âä†ËΩΩÂõæÂÉèÁîüÊàêÂ∑•‰ΩúÊµÅ
                print(f"üì• Âä†ËΩΩÂ∑•‰ΩúÊµÅ: {Config.IMAGE_WORKFLOW}")
                workflow = self.load_workflow(Config.IMAGE_WORKFLOW)
                
                # ‰øÆÊîπÂ∑•‰ΩúÊµÅ‰∏≠ÁöÑÊèêÁ§∫ËØç
                print(f"‚úèÔ∏è Êõ¥Êñ∞ÊèêÁ§∫ËØç...")
                workflow = self._update_image_workflow(workflow, prompt)
                
                # ÊâßË°åÂ∑•‰ΩúÊµÅ
                print(f"‚öôÔ∏è ÊâßË°åÂ∑•‰ΩúÊµÅ...")
                image_path = self._execute_workflow(workflow, filename)
                
                if image_path and Path(image_path).exists():
                    # È™åËØÅÁîüÊàêÁöÑÂõæÁâá
                    file_size = Path(image_path).stat().st_size
                    if file_size > 1024:  # Â§ß‰∫é1KB
                        print(f"‚úÖ ÂçïÂº†ÂõæÁâáÁîüÊàêÊàêÂäü: {Path(image_path).name}")
                        print(f"üìä Êñá‰ª∂Â§ßÂ∞è: {file_size/1024:.1f}KB")
                        return image_path
                    else:
                        raise Exception(f"ÁîüÊàêÁöÑÂõæÁâáÊñá‰ª∂Â§™Â∞è({file_size}Â≠óËäÇ)ÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                else:
                    raise Exception("Â∑•‰ΩúÊµÅÊâßË°åÊú™ËøîÂõûÊúâÊïàÁªìÊûúÊàñÊñá‰ª∂‰∏çÂ≠òÂú®")
                    
            except Exception as e:
                last_error = str(e)
                error_detail = f"ÂçïÂº†ÂõæÁâáÁîüÊàêÂ§±Ë¥• (Â∞ùËØï{retry+1}/{max_retries+1}): {last_error}"
                print(f"‚ùå {error_detail}")
                
                # Â¶ÇÊûú‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØïÔºåÊòæÁ§∫ÈáçËØï‰ø°ÊÅØ
                if retry < max_retries:
                    print(f"üîÑ ÂáÜÂ§áÈáçËØï...")
                    # ËØ¶ÁªÜÁöÑÈîôËØØËØäÊñ≠
                    self._diagnose_single_image_error(last_error)
                else:
                    print(f"üí• Â∑≤ËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ÔºåÊîæÂºÉÁîüÊàê")
        
        # Â¶ÇÊûúÊâÄÊúâÈáçËØïÈÉΩÂ§±Ë¥•‰∫Ü
        detailed_error = f"""ÂçïÂº†ÂõæÁâáÁîüÊàêÂÆåÂÖ®Â§±Ë¥•ÔºÅ

üîç ÈîôËØØËØ¶ÊÉÖ:
‚Ä¢ ÊèêÁ§∫ËØç: {prompt}
‚Ä¢ ÊúÄÂêéÈîôËØØ: {last_error}
‚Ä¢ ÈáçËØïÊ¨°Êï∞: {max_retries}

üí° ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à:
1. Ê£ÄÊü•ComfyUIÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å
2. Á°ÆËÆ§Â∑•‰ΩúÊµÅÊñá‰ª∂ÊòØÂê¶Â≠òÂú®‰∏îÊúâÊïà
3. Ê£ÄÊü•GPUÂÜÖÂ≠òÊòØÂê¶ÂÖÖË∂≥
4. Â∞ùËØïÁÆÄÂåñÊèêÁ§∫ËØçÂÜÖÂÆπ
5. ÈáçÂêØComfyUIÊúçÂä°

‚ùå Êó†Ê≥ïÁîüÊàêÊúâÊïàÂõæÁâáÔºåËØ∑Ê†πÊçÆ‰ª•‰∏äÂª∫ËÆÆÊéíÊü•ÈóÆÈ¢ò„ÄÇ"""
        
        print(f"\n{'='*60}")
        print(detailed_error)
        print(f"{'='*60}\n")
        
        # ÊäõÂá∫ËØ¶ÁªÜÁöÑÂºÇÂ∏∏‰ø°ÊÅØ
        raise Exception(detailed_error)

    def generate_images(self, prompts: List[str], max_retries: int = 3) -> List[str]:
        """ÁîüÊàêÂàÜÈïúÂõæÁâá - Â∏¶ÈáçËØïÊú∫Âà∂ÔºåÂ§±Ë¥•Êó∂Êèê‰æõËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØ"""
        image_paths = []
        
        print(f"üé® ÂºÄÂßãÁîüÊàê {len(prompts)} Âº†ÂàÜÈïúÂõæ...")
        print(f"üìÅ ‰ΩøÁî®Â∑•‰ΩúÊµÅ: {Config.IMAGE_WORKFLOW}")
        print(f"üîÑ ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞: {max_retries}")
        
        for i, prompt in enumerate(prompts):
            print(f"\n=== ÁîüÊàêÁ¨¨{i+1}Âº†ÂàÜÈïúÂõæ ===")
            print(f"üìù ÊèêÁ§∫ËØç: {prompt}")
            
            success = False
            last_error = None
            
            # ÈáçËØïÊú∫Âà∂
            for retry in range(max_retries + 1):
                try:
                    if retry > 0:
                        print(f"üîÑ Á¨¨{retry}Ê¨°ÈáçËØï (ÂÖ±{max_retries}Ê¨°)...")
                        import time
                        time.sleep(2 * retry)  # ÈÄêÊ∏êÂ¢ûÂä†Á≠âÂæÖÊó∂Èó¥
                    
                    # Ê£ÄÊü•ComfyUIËøûÊé•Áä∂ÊÄÅ
                    if not self.check_connection():
                        raise Exception("ComfyUIÊúçÂä°ËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å")
                    
                    # Âä†ËΩΩÂõæÂÉèÁîüÊàêÂ∑•‰ΩúÊµÅ
                    print(f"üì• Âä†ËΩΩÂ∑•‰ΩúÊµÅ: {Config.IMAGE_WORKFLOW}")
                    workflow = self.load_workflow(Config.IMAGE_WORKFLOW)
                    
                    # ‰øÆÊîπÂ∑•‰ΩúÊµÅ‰∏≠ÁöÑÊèêÁ§∫ËØç
                    print(f"‚úèÔ∏è Êõ¥Êñ∞ÊèêÁ§∫ËØç...")
                    workflow = self._update_image_workflow(workflow, prompt)
                    
                    # ÊâßË°åÂ∑•‰ΩúÊµÅ
                    print(f"‚öôÔ∏è ÊâßË°åÂ∑•‰ΩúÊµÅ...")
                    image_path = self._execute_workflow(workflow, f"storyboard_{i+1:03d}")
                    
                    if image_path and Path(image_path).exists():
                        # È™åËØÅÁîüÊàêÁöÑÂõæÁâá
                        file_size = Path(image_path).stat().st_size
                        if file_size > 1024:  # Â§ß‰∫é1KB
                            image_paths.append(image_path)
                            print(f"‚úÖ Á¨¨{i+1}Âº†ÂàÜÈïúÂõæÁîüÊàêÊàêÂäü: {Path(image_path).name}")
                            print(f"üìä Êñá‰ª∂Â§ßÂ∞è: {file_size/1024:.1f}KB")
                            success = True
                            break
                        else:
                            raise Exception(f"ÁîüÊàêÁöÑÂõæÁâáÊñá‰ª∂Â§™Â∞è({file_size}Â≠óËäÇ)ÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                    else:
                        raise Exception("Â∑•‰ΩúÊµÅÊâßË°åÊú™ËøîÂõûÊúâÊïàÁªìÊûúÊàñÊñá‰ª∂‰∏çÂ≠òÂú®")
                        
                except Exception as e:
                    last_error = str(e)
                    error_detail = f"Á¨¨{i+1}Âº†ÂàÜÈïúÂõæÁîüÊàêÂ§±Ë¥• (Â∞ùËØï{retry+1}/{max_retries+1}): {last_error}"
                    print(f"‚ùå {error_detail}")
                    
                    # Â¶ÇÊûú‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØïÔºåÊòæÁ§∫ÈáçËØï‰ø°ÊÅØ
                    if retry < max_retries:
                        print(f"üîÑ ÂáÜÂ§áÈáçËØï...")
                        # ËØ¶ÁªÜÁöÑÈîôËØØËØäÊñ≠
                        self._diagnose_generation_error(last_error, i+1)
                    else:
                        print(f"üí• Â∑≤ËææÂà∞ÊúÄÂ§ßÈáçËØïÊ¨°Êï∞ÔºåÊîæÂºÉÁîüÊàêÁ¨¨{i+1}Âº†ÂàÜÈïúÂõæ")
            
            # Â¶ÇÊûúÊâÄÊúâÈáçËØïÈÉΩÂ§±Ë¥•‰∫Ü
            if not success:
                detailed_error = f"""Á¨¨{i+1}Âº†ÂàÜÈïúÂõæÁîüÊàêÂÆåÂÖ®Â§±Ë¥•ÔºÅ

üîç ÈîôËØØËØ¶ÊÉÖ:
‚Ä¢ ÊèêÁ§∫ËØç: {prompt}
‚Ä¢ ÊúÄÂêéÈîôËØØ: {last_error}
‚Ä¢ ÈáçËØïÊ¨°Êï∞: {max_retries}

üí° ÂèØËÉΩÁöÑËß£ÂÜ≥ÊñπÊ°à:
1. Ê£ÄÊü•ComfyUIÊúçÂä°ÊòØÂê¶Ê≠£Â∏∏ËøêË°å
2. Á°ÆËÆ§Â∑•‰ΩúÊµÅÊñá‰ª∂ÊòØÂê¶Â≠òÂú®‰∏îÊúâÊïà
3. Ê£ÄÊü•GPUÂÜÖÂ≠òÊòØÂê¶ÂÖÖË∂≥
4. Â∞ùËØïÁÆÄÂåñÊèêÁ§∫ËØçÂÜÖÂÆπ
5. ÈáçÂêØComfyUIÊúçÂä°

‚ùå Áî±‰∫éÊó†Ê≥ïÁîüÊàêÊúâÊïàÁöÑÂàÜÈïúÂõæÔºåÊµÅÁ®ãÂ∞ÜÁªàÊ≠¢„ÄÇ"""
                
                print(f"\n{'='*60}")
                print(detailed_error)
                print(f"{'='*60}\n")
                
                # ÊäõÂá∫ËØ¶ÁªÜÁöÑÂºÇÂ∏∏‰ø°ÊÅØ
                raise Exception(detailed_error)
        
        print(f"\nüéâ ÊâÄÊúâÂàÜÈïúÂõæÁîüÊàêÂÆåÊàê! ÂÖ±{len(image_paths)}Âº†")
        return image_paths
    
    def _diagnose_single_image_error(self, error_msg: str):
        """ËØäÊñ≠ÂçïÂº†ÂõæÁâáÁîüÊàêÈîôËØØÂπ∂Êèê‰æõÂª∫ËÆÆ"""
        print(f"\nüîç ÂçïÂº†ÂõæÁâáÈîôËØØËØäÊñ≠:")
        
        error_lower = error_msg.lower()
        
        if "connection" in error_lower or "timeout" in error_lower:
            print("üåê ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò:")
            print("  ‚Ä¢ ComfyUIÊúçÂä°ÂèØËÉΩÊú™ËøêË°åÊàñ‰∏çÂèØËææ")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊòØÂê¶Âú®127.0.0.1:8188ËøêË°å")
            
        elif "memory" in error_lower or "out of memory" in error_lower:
            print("üíæ ÂÜÖÂ≠ò‰∏çË∂≥ÈóÆÈ¢ò:")
            print("  ‚Ä¢ GPUÊòæÂ≠òÂèØËÉΩ‰∏çË∂≥")
            print("  ‚Ä¢ Âª∫ËÆÆ: ÂÖ≥Èó≠ÂÖ∂‰ªñÂç†Áî®GPUÁöÑÁ®ãÂ∫èÔºåÊàñÈôç‰ΩéÂõæÁâáÂàÜËæ®Áéá")
            
        elif "workflow" in error_lower or "node" in error_lower:
            print("‚öôÔ∏è Â∑•‰ΩúÊµÅÈóÆÈ¢ò:")
            print("  ‚Ä¢ Â∑•‰ΩúÊµÅÊñá‰ª∂ÂèØËÉΩÊçüÂùèÊàñËäÇÁÇπÁº∫Â§±")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊèí‰ª∂ÊòØÂê¶ÂÆåÊï¥ÂÆâË£Ö")
            
        elif "file" in error_lower:
            print("üìÅ Êñá‰ª∂Á≥ªÁªüÈóÆÈ¢ò:")
            print("  ‚Ä¢ ÂèØËÉΩÊòØÊùÉÈôêÈóÆÈ¢òÊàñÁ£ÅÁõòÁ©∫Èó¥‰∏çË∂≥")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ËæìÂá∫ÁõÆÂΩïÊùÉÈôêÂíåÁ£ÅÁõòÁ©∫Èó¥")
            
        else:
            print("‚ùì Êú™Áü•ÈîôËØØ:")
            print(f"  ‚Ä¢ ÂéüÂßãÈîôËØØ: {error_msg[:200]}")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊéßÂà∂Âè∞ËæìÂá∫Ëé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ")
        
        print("‚è±Ô∏è Á≠âÂæÖ2ÁßíÂêéÈáçËØï...")
    
    def _diagnose_generation_error(self, error_msg: str, image_index: int):
        """ËØäÊñ≠ÂõæÁâáÁîüÊàêÈîôËØØÂπ∂Êèê‰æõÂª∫ËÆÆ"""
        print(f"\nüîç ÈîôËØØËØäÊñ≠ (Á¨¨{image_index}Âº†ÂàÜÈïúÂõæ):")
        
        error_lower = error_msg.lower()
        
        if "connection" in error_lower or "timeout" in error_lower:
            print("üåê ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò:")
            print("  ‚Ä¢ ComfyUIÊúçÂä°ÂèØËÉΩÊú™ËøêË°åÊàñ‰∏çÂèØËææ")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊòØÂê¶Âú®127.0.0.1:8188ËøêË°å")
            
        elif "memory" in error_lower or "out of memory" in error_lower:
            print("üíæ ÂÜÖÂ≠ò‰∏çË∂≥ÈóÆÈ¢ò:")
            print("  ‚Ä¢ GPUÊòæÂ≠òÂèØËÉΩ‰∏çË∂≥")
            print("  ‚Ä¢ Âª∫ËÆÆ: ÂÖ≥Èó≠ÂÖ∂‰ªñÂç†Áî®GPUÁöÑÁ®ãÂ∫èÔºåÊàñÈôç‰ΩéÂõæÁâáÂàÜËæ®Áéá")
            
        elif "workflow" in error_lower or "node" in error_lower:
            print("‚öôÔ∏è Â∑•‰ΩúÊµÅÈóÆÈ¢ò:")
            print("  ‚Ä¢ Â∑•‰ΩúÊµÅÊñá‰ª∂ÂèØËÉΩÊçüÂùèÊàñËäÇÁÇπÁº∫Â§±")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊèí‰ª∂ÊòØÂê¶ÂÆåÊï¥ÂÆâË£Ö")
            
        elif "file" in error_lower:
            print("üìÅ Êñá‰ª∂Á≥ªÁªüÈóÆÈ¢ò:")
            print("  ‚Ä¢ ÂèØËÉΩÊòØÊùÉÈôêÈóÆÈ¢òÊàñÁ£ÅÁõòÁ©∫Èó¥‰∏çË∂≥")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ËæìÂá∫ÁõÆÂΩïÊùÉÈôêÂíåÁ£ÅÁõòÁ©∫Èó¥")
            
        else:
            print("‚ùì Êú™Áü•ÈîôËØØ:")
            print(f"  ‚Ä¢ ÂéüÂßãÈîôËØØ: {error_msg[:200]}")
            print("  ‚Ä¢ Âª∫ËÆÆ: Ê£ÄÊü•ComfyUIÊéßÂà∂Âè∞ËæìÂá∫Ëé∑ÂèñÊõ¥Â§ö‰ø°ÊÅØ")
        
        print("‚è±Ô∏è Á≠âÂæÖ2ÁßíÂêéÈáçËØï...")
    
    def _queue_prompt(self, workflow: Dict) -> Optional[str]:
        """Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ÈòüÂàó"""
        try:
            prompt_data = {
                "prompt": workflow,
                "client_id": self.client_id
            }
            
            print(f"\n=== Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ComfyUI ===")
            print(f"Client ID: {self.client_id}")
            print(f"URL: {self.base_url}/prompt")
            print(f"Â∑•‰ΩúÊµÅËäÇÁÇπÊï∞Èáè: {len(workflow)}")
            
            # ÊòæÁ§∫Â∑•‰ΩúÊµÅÁöÑÂâçÂá†‰∏™ËäÇÁÇπ‰ø°ÊÅØ
            for i, (node_id, node_data) in enumerate(list(workflow.items())[:3]):
                print(f"Node {node_id}: {node_data.get('class_type', 'Unknown')}")
                if 'inputs' in node_data:
                    for key, value in list(node_data['inputs'].items())[:3]:
                        if isinstance(value, str) and len(value) > 50:
                            print(f"  {key}: {value[:50]}...")
                        else:
                            print(f"  {key}: {value}")
            
            response = requests.post(
                f"{self.base_url}/prompt",
                json=prompt_data,
                timeout=30
            )
            
            print(f"ÂìçÂ∫îÁä∂ÊÄÅÁ†Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                prompt_id = result.get("prompt_id")
                print(f"Prompt ID: {prompt_id}")
                print(f"=========================\n")
                return prompt_id
            else:
                print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                
                # Â∞ùËØïËß£ÊûêÈîôËØØ‰ø°ÊÅØ
                try:
                    error_data = response.json()
                    print(f"ÈîôËØØËØ¶ÊÉÖ: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                except:
                    print(f"Êó†Ê≥ïËß£ÊûêÈîôËØØÂìçÂ∫î")
                
                print(f"=========================\n")
                return None
                
        except Exception as e:
            print(f"Êèê‰∫§Â∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            # Ê£ÄÊü•ÊòØÂê¶ÊòØËøûÊé•ÈîôËØØÔºåÂ¶ÇÊûúÊòØÂàôÂ∞ùËØïÈáçÂêØÊúçÂä°
            if "WinError 10061" in str(e) or "Failed to establish a new connection" in str(e):
                print("üö® ComfyUIÊúçÂä°ËøûÊé•Â§±Ë¥•ÔºåÂ∞ùËØïÊ£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ...")
                self._attempt_service_recovery()
            print(f"=========================\n")
            return None
    
    def _attempt_service_recovery(self):
        """Â∞ùËØïÊÅ¢Â§çComfyUIÊúçÂä°"""
        try:
            print("üîß Â∞ùËØïÊÅ¢Â§çComfyUIÊúçÂä°...")
            
            # 1. Á≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ËÆ©ÊúçÂä°ÂèØËÉΩËá™Ë°åÊÅ¢Â§ç
            print("‚è≥ Á≠âÂæÖÊúçÂä°ÂèØËÉΩÁöÑËá™Âä®ÊÅ¢Â§ç...")
            import time
            time.sleep(10)
            
            # 2. Ê£ÄÊü•ÊúçÂä°ÊòØÂê¶ÊÅ¢Â§ç
            if self.check_connection():
                print("‚úÖ ComfyUIÊúçÂä°Â∑≤ÊÅ¢Â§ç")
                return True
            
            # 3. Â¶ÇÊûúÊúçÂä°‰ªçÊú™ÊÅ¢Â§çÔºåÂª∫ËÆÆÁî®Êà∑ÊâãÂä®ÈáçÂêØ
            print("‚ö†Ô∏è ComfyUIÊúçÂä°‰ªçÊú™ÊÅ¢Â§çÔºåËØ∑ÊâãÂä®ÈáçÂêØComfyUIÊúçÂä°:")
            print("   1. ÂÖ≥Èó≠ÂΩìÂâçComfyUIËøõÁ®ã")
            print("   2. ÈáçÊñ∞ÂêØÂä®ComfyUI")
            print("   3. Á≠âÂæÖÊúçÂä°ÂÆåÂÖ®ÂêØÂä®ÂêéÂÜçÁªßÁª≠")
            
            # 4. Â∞ùËØïÊõ¥ÈïøÊó∂Èó¥ÁöÑÁ≠âÂæÖ
            print("‚è≥ ÁªßÁª≠Á≠âÂæÖÊúçÂä°ÊÅ¢Â§ç...")
            for i in range(12):  # Á≠âÂæÖ2ÂàÜÈíü
                time.sleep(10)
                if self.check_connection():
                    print("‚úÖ ComfyUIÊúçÂä°Â∑≤ÊÅ¢Â§ç")
                    return True
                print(f"   Á≠âÂæÖ‰∏≠... ({i+1}/12)")
            
            print("‚ùå ComfyUIÊúçÂä°ÈïøÊó∂Èó¥Êú™ÊÅ¢Â§çÔºåËØ∑Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ")
            return False
            
        except Exception as e:
            print(f"ÊúçÂä°ÊÅ¢Â§çÂ∞ùËØïÂ§±Ë¥•: {str(e)}")
            return False
    
    def _wait_for_completion(self, prompt_id: str, timeout: int = 900) -> Optional[Dict]:
        """Á≠âÂæÖÂ∑•‰ΩúÊµÅÂÆåÊàê - Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥Âà∞15ÂàÜÈíü"""
        start_time = time.time()
        
        # Â¢ûÂä†ÂàùÂßãÁ≠âÂæÖÊó∂Èó¥ÔºåËÆ©ComfyUIÊúâÊó∂Èó¥ÂºÄÂßãÂ§ÑÁêÜ
        time.sleep(2)
        
        while time.time() - start_time < timeout:
            try:
                # Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅ
                response = requests.get(f"{self.base_url}/history/{prompt_id}", timeout=30)
                
                if response.status_code == 200:
                    history = response.json()
                    
                    if prompt_id in history:
                        # ‰ªªÂä°ÂÆåÊàê
                        outputs = history[prompt_id].get("outputs", {})
                        return outputs
                else:
                    print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                    return None
                
            except Exception as e:
                print(f"Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅÂºÇÂ∏∏: {str(e)}")
                return None
    
    def _save_output(self, output_images: Dict, filename: str) -> Optional[str]:
        """‰øùÂ≠òËæìÂá∫Êñá‰ª∂"""
        try:
            import base64
            
            print(f"\n=== ‰øùÂ≠òËæìÂá∫Êñá‰ª∂ ===")
            print(f"Êñá‰ª∂Âêç: {filename}")
            print(f"ËæìÂá∫ÂõæÁâáÊï∞Èáè: {len(output_images)}")
            
            if len(output_images) == 0:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïËæìÂá∫ÂõæÁâá")
                return None
            
            # ÈÄâÊã©Á¨¨‰∏Ä‰∏™ËæìÂá∫ÂõæÁâá
            output_image = output_images[0]
            image_data = output_image[0]
            image_format = output_image[1]
            image_name = output_image[2]
            
            print(f"ÈÄâÊã©ÂõæÁâá: {image_name}")
            print(f"ÂõæÁâáÊ†ºÂºè: {image_format}")
            
            # ÁîüÊàêÁõÆÊ†áË∑ØÂæÑ
            dest_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Ëß£Á†Åbase64Êï∞ÊçÆÂπ∂‰øùÂ≠òÊñá‰ª∂
            with open(dest_path, "wb") as output_file:
                output_file.write(base64.b64decode(image_data))
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäü‰øùÂ≠òËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂‰øùÂ≠òÂ§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"‰øùÂ≠òËæìÂá∫Êñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _get_comfyui_output_files(self) -> Dict[str, float]:
        """Ëé∑ÂèñComfyUI outputÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂ÂèäÂÖ∂‰øÆÊîπÊó∂Èó¥"""
        try:
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                return {}
            
            files_info = {}
            # Ëé∑ÂèñÊâÄÊúâËßÜÈ¢ëÊñá‰ª∂
            for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv']:
                for file_path in comfyui_output_dir.glob(ext):
                    files_info[str(file_path)] = file_path.stat().st_mtime
            
            return files_info
        except Exception as e:
            print(f"Ëé∑ÂèñÊñá‰ª∂ÂàóË°®Â§±Ë¥•: {str(e)}")
            return {}
    
    def _execute_workflow_with_file_tracking(self, workflow: Dict, filename: str, files_before: Dict[str, float]) -> Optional[str]:
        """ÊâßË°åComfyUIÂ∑•‰ΩúÊµÅÂπ∂Ë∑üË∏™Êñ∞ÁîüÊàêÁöÑÊñá‰ª∂"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # È¶ñÂÖàÂ∞ùËØïÈÄöËøáAPI‰øùÂ≠ò
                api_result = self._save_output(output_images, filename)
                if api_result:
                    return api_result
            
            # APIÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè
            print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè...")
            return self._find_new_video_file(files_before, filename)
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            # Â¶ÇÊûúÊúâÂºÇÂ∏∏Ôºå‰πüÂ∞ùËØïÊñá‰ª∂Ë∑üË∏™
            return self._find_new_video_file(files_before, filename)
    
    def _find_new_video_file(self, files_before: Dict[str, float], filename: str) -> Optional[str]:
        """Êü•ÊâæÊñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            files_after = self._get_comfyui_output_files()
            
            # ÊâæÂá∫Êñ∞Â¢ûÁöÑÊñá‰ª∂
            new_files = []
            for file_path, mtime in files_after.items():
                if file_path not in files_before:
                    # ÂÖ®Êñ∞Êñá‰ª∂
                    new_files.append((file_path, mtime, 'new'))
                elif mtime > files_before[file_path]:
                    # ‰øÆÊîπËøáÁöÑÊñá‰ª∂
                    new_files.append((file_path, mtime, 'modified'))
            
            if not new_files:
                print(f"‚úó Êú™ÊâæÂà∞Êñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂")
                return None
            
            print(f"ÊâæÂà∞ {len(new_files)} ‰∏™Êñ∞/‰øÆÊîπÁöÑÊñá‰ª∂:")
            for file_path, mtime, status in new_files:
                file_obj = Path(file_path)
                size = file_obj.stat().st_size / 1024 / 1024
                print(f"  {file_obj.name} ({size:.2f}MB, {status})")
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊñá‰ª∂ÔºàÊåâ‰øÆÊîπÊó∂Èó¥Ôºâ
            latest_file = max(new_files, key=lambda x: x[1])
            latest_path = Path(latest_file[0])
            
            # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
            file_size = latest_path.stat().st_size
            if file_size < 100 * 1024:  # Â∞è‰∫é100KB
                print(f"‚ö†Ô∏è ÊúÄÊñ∞Êñá‰ª∂Â§™Â∞è ({file_size/1024:.1f}KB)ÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                # Â∞ùËØïÊâæÊõ¥Â§ßÁöÑÊñá‰ª∂
                valid_files = [(f, m, s) for f, m, s in new_files if Path(f).stat().st_size > 100 * 1024]
                if valid_files:
                    # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂
                    latest_file = max(valid_files, key=lambda x: x[1])
                    latest_path = Path(latest_file[0])
                    print(f"‰ΩøÁî®ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂: {latest_path.name}")
            
            print(f"ÈÄâÊã©Êñá‰ª∂: {latest_path}")
            
            # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
            return self._copy_video_file(latest_path, filename)
            
        except Exception as e:
            print(f"Êü•ÊâæÊñ∞Êñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_video_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            # ÁõÆÊ†áË∑ØÂæÑ
            dest_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _encode_image_to_base64(self, image_path: str) -> str:
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
    
    def _find_latest_generated_image(self, filename: str) -> Optional[str]:
        """‰ªé ComfyUI ËæìÂá∫ÁõÆÂΩïÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                print(f"‚úó ComfyUI outputÁõÆÂΩï‰∏çÂ≠òÂú®: {comfyui_output_dir}")
                return None
            
            print(f"\n=== Êü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá ===")
            print(f"ÊêúÁ¥¢ÁõÆÂΩï: {comfyui_output_dir}")
            
            # Êü•ÊâæÊâÄÊúâÂõæÁâáÊñá‰ª∂
            image_files = []
            for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.webp']:
                found_files = list(comfyui_output_dir.glob(ext))
                image_files.extend(found_files)
                if found_files:
                    print(f"ÊâæÂà∞ {len(found_files)} ‰∏™ {ext} Êñá‰ª∂")
            
            if not image_files:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïÂõæÁâáÊñá‰ª∂")
                return None
            
            print(f"ÊÄªÂÖ±ÊâæÂà∞ {len(image_files)} ‰∏™ÂõæÁâáÊñá‰ª∂")
            
            # Êåâ‰øÆÊîπÊó∂Èó¥ÊéíÂ∫èÔºåÈÄâÊã©ÊúÄÊñ∞ÁöÑ
            image_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâáÔºàÂ§ß‰∫é50KBÔºâ
            for image_file in image_files[:5]:  # Âè™Ê£ÄÊü•ÊúÄÊñ∞ÁöÑ5‰∏™Êñá‰ª∂
                file_size = image_file.stat().st_size
                file_time = time.ctime(image_file.stat().st_mtime)
                print(f"Ê£ÄÊü•Êñá‰ª∂: {image_file.name} ({file_size/1024:.1f}KB, {file_time})")
                
                if file_size > 50 * 1024:  # Â§ß‰∫é50KB
                    print(f"‚úÖ ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâá: {image_file.name}")
                    
                    # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
                    return self._copy_image_file(image_file, filename)
            
            print(f"‚úó Êú™ÊâæÂà∞ÊúâÊïàÁöÑÂõæÁâáÊñá‰ª∂ÔºàÂ§ß‰∫é50KBÔºâ")
            return None
            
        except Exception as e:
            print(f"Êü•ÊâæÊúÄÊñ∞ÂõæÁâáÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_image_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ÂõæÁâáÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            print(f"\n=== Â§çÂà∂ÂõæÁâáÊñá‰ª∂ ===")
            print(f"Ê∫êÊñá‰ª∂: {source_path}")
            print(f"Ê∫êÊñá‰ª∂Â§ßÂ∞è: {source_path.stat().st_size/1024/1024:.2f}MB")
            
            # ÁõÆÊ†áË∑ØÂæÑ - ‰ΩøÁî®ÂéüÂßãÊâ©Â±ïÂêç
            dest_path = Config.STORYBOARD_DIR / f"{filename}{source_path.suffix}"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.STORYBOARD_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            print(f"ÂºÄÂßãÂ§çÂà∂Êñá‰ª∂...")
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ÂõæÁâá: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                print(f"=========================\n")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ÂõæÁâáÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None

    def _execute_workflow(self, workflow: Dict, filename: str) -> Optional[str]:
        """ÊâßË°åComfyUIÂ∑•‰ΩúÊµÅ"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # ‰øùÂ≠òËæìÂá∫Êñá‰ª∂
                saved_path = self._save_output(output_images, filename)
                if saved_path:
                    return saved_path
                else:
                    print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•ÔºåÂ∞ùËØï‰ªéËæìÂá∫ÁõÆÂΩïÊü•Êâæ...")
                    # Ê†πÊçÆfilenameÂà§Êñ≠ÊòØÈü≥È¢ëËøòÊòØÂõæÁâá
                    if filename.startswith('audio_'):
                        # Èü≥È¢ëÊñá‰ª∂ÔºåÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÈü≥È¢ë
                        return self._find_latest_generated_audio(filename)
                    else:
                        # ÂõæÁâáÊñá‰ª∂ÔºåÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá
                        return self._find_latest_generated_image(filename)
            
            return None
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂ§±Ë¥•: {str(e)}")
            return None
    
    def _queue_prompt(self, workflow: Dict) -> Optional[str]:
        """Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ÈòüÂàó"""
        try:
            prompt_data = {
                "prompt": workflow,
                "client_id": self.client_id
            }
            
            print(f"\n=== Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ComfyUI ===")
            print(f"Client ID: {self.client_id}")
            print(f"URL: {self.base_url}/prompt")
            print(f"Â∑•‰ΩúÊµÅËäÇÁÇπÊï∞Èáè: {len(workflow)}")
            
            # ÊòæÁ§∫Â∑•‰ΩúÊµÅÁöÑÂâçÂá†‰∏™ËäÇÁÇπ‰ø°ÊÅØ
            for i, (node_id, node_data) in enumerate(list(workflow.items())[:3]):
                print(f"Node {node_id}: {node_data.get('class_type', 'Unknown')}")
                if 'inputs' in node_data:
                    for key, value in list(node_data['inputs'].items())[:3]:
                        if isinstance(value, str) and len(value) > 50:
                            print(f"  {key}: {value[:50]}...")
                        else:
                            print(f"  {key}: {value}")
            
            response = requests.post(
                f"{self.base_url}/prompt",
                json=prompt_data,
                timeout=30
            )
            
            print(f"ÂìçÂ∫îÁä∂ÊÄÅÁ†Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                prompt_id = result.get("prompt_id")
                print(f"Prompt ID: {prompt_id}")
                print(f"=========================\n")
                return prompt_id
            else:
                print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                
                # Â∞ùËØïËß£ÊûêÈîôËØØ‰ø°ÊÅØ
                try:
                    error_data = response.json()
                    print(f"ÈîôËØØËØ¶ÊÉÖ: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                except:
                    print(f"Êó†Ê≥ïËß£ÊûêÈîôËØØÂìçÂ∫î")
                
                print(f"=========================\n")
                return None
                
        except Exception as e:
            print(f"Êèê‰∫§Â∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            print(f"=========================\n")
            return None
    
    def _wait_for_completion(self, prompt_id: str, timeout: int = 900) -> Optional[Dict]:
        """Á≠âÂæÖÂ∑•‰ΩúÊµÅÂÆåÊàê - Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥Âà∞15ÂàÜÈíü"""
        start_time = time.time()
        
        # Â¢ûÂä†ÂàùÂßãÁ≠âÂæÖÊó∂Èó¥ÔºåËÆ©ComfyUIÊúâÊó∂Èó¥ÂºÄÂßãÂ§ÑÁêÜ
        time.sleep(2)
        
        while time.time() - start_time < timeout:
            try:
                # Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅ
                response = requests.get(f"{self.base_url}/history/{prompt_id}", timeout=30)
                
                if response.status_code == 200:
                    history = response.json()
                    
                    if prompt_id in history:
                        # ‰ªªÂä°ÂÆåÊàê
                        outputs = history[prompt_id].get("outputs", {})
                        return outputs
                else:
                    print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                    return None
                
            except Exception as e:
                print(f"Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅÂºÇÂ∏∏: {str(e)}")
                return None
    
    def _execute_workflow_simple(self, workflow: Dict, video_filename: str, timestamp: int) -> Optional[str]:
        """ÁÆÄÂåñÁöÑÂ∑•‰ΩúÊµÅÊâßË°åÔºåÊåâÊñá‰ª∂Âêç+Êó∂Èó¥Êà≥Êü•ÊâæËßÜÈ¢ë"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # È¶ñÂÖàÂ∞ùËØïÈÄöËøáAPI‰øùÂ≠ò
                api_result = self._save_output(output_images, video_filename)
                if api_result:
                    return api_result
            
            # APIÂ§±Ë¥•ÔºåÊåâÊó∂Èó¥Êà≥Êü•ÊâæÊúÄÊñ∞Êñá‰ª∂
            print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•ÔºåÊåâÊó∂Èó¥Êà≥Êü•ÊâæÊúÄÊñ∞ËßÜÈ¢ëÊñá‰ª∂...")
            return self._find_video_by_timestamp(video_filename, timestamp)
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            # Â¶ÇÊûúÊúâÂºÇÂ∏∏Ôºå‰πüÂ∞ùËØïÊåâÊó∂Èó¥Êà≥Êü•Êâæ
            return self._find_video_by_timestamp(video_filename, timestamp)
    
    def _find_video_by_timestamp(self, video_filename: str, timestamp: int) -> Optional[str]:
        """ÊåâÊó∂Èó¥Êà≥Êü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂ÔºåÁ°Æ‰øùÊØèÊ¨°ÈÉΩÁîüÊàêÂîØ‰∏ÄÁöÑÊñ∞Êñá‰ª∂"""
        try:
            import time
            # Á≠âÂæÖComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ• - Â¢ûÂä†Á≠âÂæÖÊó∂Èó¥
            print("‚è≥ Á≠âÂæÖComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•...")
            time.sleep(5)  # Â¢ûÂä†Á≠âÂæÖÊó∂Èó¥Á°Æ‰øùÊñá‰ª∂ÂÆåÂÖ®ÂÜôÂÖ•
            
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                print(f"‚úó ComfyUI outputÁõÆÂΩï‰∏çÂ≠òÂú®: {comfyui_output_dir}")
                return None
            
            print(f"\n=== Êü•ÊâæËßÜÈ¢ëÊñá‰ª∂ (Êó∂Èó¥Êà≥: {timestamp}) ===")
            print(f"ÊêúÁ¥¢ÁõÆÂΩï: {comfyui_output_dir}")
            print(f"ËßÜÈ¢ëÊñá‰ª∂Âêç: {video_filename}")
            
            # Ê∏ÖÁêÜÈ°πÁõÆÁõÆÂΩï‰∏≠ÁöÑÂéÜÂè≤Êñá‰ª∂ÔºåÈò≤Ê≠¢Ê∑∑Ê∑Ü
            self._clean_old_video_files(video_filename)
            
            # Êü•ÊâæÊâÄÊúâËßÜÈ¢ëÊñá‰ª∂
            video_files = []
            for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv']:
                found_files = list(comfyui_output_dir.glob(ext))
                video_files.extend(found_files)
                if found_files:
                    print(f"ÊâæÂà∞ {len(found_files)} ‰∏™ {ext} Êñá‰ª∂")
            
            if not video_files:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïËßÜÈ¢ëÊñá‰ª∂")
                # ÊòæÁ§∫ÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂‰ª•‰æøË∞ÉËØï
                all_files = list(comfyui_output_dir.glob('*.*'))
                print(f"ÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂: {[f.name for f in all_files[:10]]}")
                return None
            
            print(f"ÊÄªÂÖ±ÊâæÂà∞ {len(video_files)} ‰∏™ËßÜÈ¢ëÊñá‰ª∂")
            
            # Êü•ÊâæÂú®Êó∂Èó¥Êà≥‰πãÂêéÁîüÊàêÁöÑÊñá‰ª∂ÔºàËΩ¨Êç¢‰∏∫ÁßíÔºâ
            timestamp_seconds = timestamp / 1000.0
            
            # Ê∑ªÂä†Êõ¥‰∏•Ê†ºÁöÑÊó∂Èó¥ËåÉÂõ¥Á≠õÈÄâÔºåÈÅøÂÖçÈÄâÊã©ÂéÜÂè≤Êñá‰ª∂
            # Êâ©Â§ßÊó∂Èó¥Á™óÂè£‰ª•ÈÄÇÂ∫îÂèØËÉΩÁöÑÁ≥ªÁªüÊó∂Èó¥Â∑ÆÂºÇ
            min_timestamp = timestamp_seconds - 30  # ÂÖÅËÆ∏ÊúÄÂ§ö30ÁßíÁöÑÊó∂Èó¥ÂÅèÂ∑Æ
            max_timestamp = timestamp_seconds + 300  # ÂÖÅËÆ∏ÊúÄÂ§ö5ÂàÜÈíüÁöÑÊó∂Èó¥ÂÅèÂ∑Æ
            
            recent_files = []
            
            for video_file in video_files:
                try:
                    file_mtime = video_file.stat().st_mtime
                    file_size = video_file.stat().st_size
                    file_time_readable = time.ctime(file_mtime)
                    
                    print(f"Ê£ÄÊü•Êñá‰ª∂: {video_file.name} ({file_size/1024/1024:.2f}MB, {file_time_readable})")
                    
                    # ‰∏•Ê†ºÁöÑÊó∂Èó¥ËåÉÂõ¥Á≠õÈÄâÔºöÂøÖÈ°ªÂú®ÂêàÁêÜÁöÑÊó∂Èó¥Á™óÂè£ÂÜÖÁîüÊàê
                    if (file_mtime >= min_timestamp and 
                        file_mtime <= max_timestamp and 
                        file_size > 100 * 1024):
                        recent_files.append((video_file, file_mtime, file_size))
                        print(f"‚úÖ Á¨¶ÂêàÊù°‰ª∂ÁöÑÂÄôÈÄâÊñá‰ª∂: {video_file.name} ({file_size/1024/1024:.2f}MB)")
                    elif file_mtime < min_timestamp:
                        print(f"‚ùå Êñá‰ª∂Â§™ÊóßÔºåÂøΩÁï•: {video_file.name}")
                    elif file_mtime > max_timestamp:
                        print(f"‚ùå Êñá‰ª∂Â§™Êñ∞ÔºåÂøΩÁï•: {video_file.name}")
                    elif file_size <= 100 * 1024:
                        print(f"‚ùå Êñá‰ª∂Â§™Â∞èÔºåÂøΩÁï•: {video_file.name}")
                except Exception as e:
                    print(f"Ê£ÄÊü•Êñá‰ª∂ {video_file.name} Êó∂Âá∫Èîô: {e}")
                    continue
            
            if not recent_files:
                print(f"‚ö†Ô∏è Êó†Ê≥ïÊâæÂà∞Âú®Êó∂Èó¥Á™óÂè£ÂÜÖÁîüÊàêÁöÑÊúâÊïàËßÜÈ¢ëÊñá‰ª∂")
                try:
                    print(f"Êó∂Èó¥Êà≥ËåÉÂõ¥: {time.ctime(min_timestamp)} ~ {time.ctime(max_timestamp)}")
                except Exception as e:
                    print(f"Êó∂Èó¥Êà≥Ê†ºÂºèÂåñÈîôËØØ: {e}")
                
                # ÊúÄÂêéÁöÑÂ§áÁî®ÊñπÊ°àÔºöÈÄâÊã©ÊúÄÊñ∞ÁöÑÂ§ßÊñá‰ª∂Ôºà‰ΩÜË¶ÅÁ°Æ‰øù‰∏çÊòØÂ§™ÊóßÁöÑÔºâ
                current_time = time.time()
                recent_enough_files = []
                for f in video_files:
                    try:
                        file_stat = f.stat()
                        if (file_stat.st_size > 100 * 1024 and 
                            file_stat.st_mtime > current_time - 600):  # 10ÂàÜÈíüÂÜÖ
                            recent_enough_files.append((f, file_stat.st_mtime, file_stat.st_size))
                    except Exception as e:
                        print(f"Ê£ÄÊü•Êñá‰ª∂ {f.name} Êó∂Âá∫Èîô: {e}")
                        continue
                
                if recent_enough_files:
                    recent_files = [max(recent_enough_files, key=lambda x: x[1])]
                    print(f"Â§áÁî®ÊñπÊ°àÔºö‰ΩøÁî®10ÂàÜÈíüÂÜÖÊúÄÊñ∞ÁöÑÊñá‰ª∂: {recent_files[0][0].name}")
                else:
                    print(f"‚úó Ê≤°ÊúâÊâæÂà∞‰ªª‰ΩïËøëÊúüÁöÑÊúâÊïàËßÜÈ¢ëÊñá‰ª∂")
                    return None
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊñá‰ª∂
            latest_file = max(recent_files, key=lambda x: x[1])[0]
            print(f"ÊúÄÁªàÈÄâÊã©Êñá‰ª∂: {latest_file}")
            print(f"Êñá‰ª∂Â§ßÂ∞è: {latest_file.stat().st_size/1024/1024:.2f}MB")
            print(f"Êñá‰ª∂Êâ©Â±ïÂêç: {latest_file.suffix}")
            
            # Á°Æ‰øùÈÄâÊã©ÁöÑÊòØËßÜÈ¢ëÊñá‰ª∂
            if latest_file.suffix.lower() not in ['.mp4', '.avi', '.mov', '.mkv']:
                print(f"‚ö†Ô∏è Ë≠¶ÂëäÔºöÈÄâÊã©ÁöÑÊñá‰ª∂‰∏çÊòØÊ†áÂáÜËßÜÈ¢ëÊ†ºÂºè: {latest_file.suffix}")
                print(f"‰ΩÜÁªßÁª≠Â§ÑÁêÜÔºåÂèØËÉΩÊòØComfyUIÁöÑÁâπÊÆäÊ†ºÂºè")
            
            # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩïÂπ∂È™åËØÅ
            result = self._copy_video_file_simple(latest_file, video_filename)
            
            if result:
                print(f"‚úÖ ËßÜÈ¢ëÊñá‰ª∂ÊàêÂäüÁîüÊàê: {result}")
            else:
                print(f"‚ùå ËßÜÈ¢ëÊñá‰ª∂Â§çÂà∂Â§±Ë¥•")
            
            return result
            
        except Exception as e:
            print(f"ÊåâÊó∂Èó¥Êà≥Êü•ÊâæÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            import traceback
            traceback.print_exc()
            return None
    
    def _clean_old_video_files(self, video_filename: str):
        """Ê∏ÖÁêÜÈ°πÁõÆÁõÆÂΩï‰∏≠ÂèØËÉΩÂ≠òÂú®ÁöÑÊóßËßÜÈ¢ëÊñá‰ª∂ÔºåÈò≤Ê≠¢ÁºìÂ≠òÊ∑∑Ê∑Ü"""
        try:
            # Ê∏ÖÁêÜÂèØËÉΩÂ≠òÂú®ÁöÑÂêåÂêçÊñá‰ª∂
            old_file = Config.VIDEO_CLIPS_DIR / f"{video_filename}.mp4"
            if old_file.exists():
                old_file.unlink()
                print(f"üóëÔ∏è Ê∏ÖÁêÜÊóßÊñá‰ª∂: {old_file}")
            
            # Ê∏ÖÁêÜÂ∏¶ÊúâÁõ∏‰ººÂêçÁß∞ÁöÑÊñá‰ª∂ÔºàÈò≤Ê≠¢Êó∂Èó¥Êà≥ÈáçÂ§çÔºâ
            base_name = video_filename.split('_')[0] if '_' in video_filename else video_filename
            for old_file in Config.VIDEO_CLIPS_DIR.glob(f"{base_name}_*.mp4"):
                if old_file.name != f"{video_filename}.mp4":
                    try:
                        # Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â§™Êñ∞Ôºà5ÂàÜÈíüÂÜÖÔºâÔºåÂ¶ÇÊûúÊòØÂàô‰∏çÂà†Èô§
                        import time
                        if time.time() - old_file.stat().st_mtime > 300:  # 5ÂàÜÈíü
                            old_file.unlink()
                            print(f"üóëÔ∏è Ê∏ÖÁêÜÂéÜÂè≤Êñá‰ª∂: {old_file}")
                        else:
                            print(f"‚è≥ ‰øùÁïôÊúÄËøëÊñá‰ª∂: {old_file}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜÊñá‰ª∂Â§±Ë¥•: {old_file} - {e}")
                        
        except Exception as e:
            print(f"‚ö†Ô∏è Ê∏ÖÁêÜÊóßÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
    
    def _copy_video_file_simple(self, source_path: Path, video_filename: str) -> Optional[str]:
        """ÁÆÄÂåñÁöÑËßÜÈ¢ëÊñá‰ª∂Â§çÂà∂"""
        try:
            import shutil
            
            print(f"\n=== Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂ ===")
            print(f"Ê∫êÊñá‰ª∂: {source_path}")
            print(f"Ê∫êÊñá‰ª∂Êâ©Â±ïÂêç: {source_path.suffix}")
            print(f"Ê∫êÊñá‰ª∂Â§ßÂ∞è: {source_path.stat().st_size/1024/1024:.2f}MB")
            print(f"ÁõÆÊ†áÊñá‰ª∂Âêç: {video_filename}")
            
            # È™åËØÅÊ∫êÊñá‰ª∂ÊòØËßÜÈ¢ëÊñá‰ª∂
            if source_path.suffix.lower() not in ['.mp4', '.avi', '.mov', '.mkv']:
                print(f"‚ö†Ô∏è Ë≠¶ÂëäÔºöÊ∫êÊñá‰ª∂‰∏çÊòØËßÜÈ¢ëÊ†ºÂºè: {source_path.suffix}")
                print(f"‰ΩÜÁªßÁª≠Â§çÂà∂ÔºåÂèØËÉΩÊòØComfyUIÁöÑËæìÂá∫Êñá‰ª∂ÂëΩÂêçÈóÆÈ¢ò")
            
            # ÁõÆÊ†áË∑ØÂæÑ - Á°Æ‰øù‰ΩøÁî®.mp4Êâ©Â±ïÂêç
            dest_path = Config.VIDEO_CLIPS_DIR / f"{video_filename}.mp4"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            print(f"ÂºÄÂßãÂ§çÂà∂Êñá‰ª∂...")
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                print(f"Êñá‰ª∂Êâ©Â±ïÂêç: {dest_path.suffix}")
                print(f"=========================\n")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                print(f"=========================\n")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            print(f"=========================\n")
            return None
        """Ëé∑ÂèñComfyUI outputÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂ÂèäÂÖ∂‰øÆÊîπÊó∂Èó¥"""
        try:
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                return {}
            
            files_info = {}
            # Ëé∑ÂèñÊâÄÊúâËßÜÈ¢ëÊñá‰ª∂
            for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv']:
                for file_path in comfyui_output_dir.glob(ext):
                    files_info[str(file_path)] = file_path.stat().st_mtime
            
            return files_info
        except Exception as e:
            print(f"Ëé∑ÂèñÊñá‰ª∂ÂàóË°®Â§±Ë¥•: {str(e)}")
            return {}
    
    def _execute_workflow_with_file_tracking(self, workflow: Dict, filename: str, files_before: Dict[str, float]) -> Optional[str]:
        """ÊâßË°åComfyUIÂ∑•‰ΩúÊµÅÂπ∂Ë∑üË∏™Êñ∞ÁîüÊàêÁöÑÊñá‰ª∂"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # È¶ñÂÖàÂ∞ùËØïÈÄöËøáAPI‰øùÂ≠ò
                api_result = self._save_output(output_images, filename)
                if api_result:
                    return api_result
            
            # APIÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè
            print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè...")
            return self._find_new_video_file(files_before, filename)
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            # Â¶ÇÊûúÊúâÂºÇÂ∏∏Ôºå‰πüÂ∞ùËØïÊñá‰ª∂Ë∑üË∏™
            return self._find_new_video_file(files_before, filename)
    
    def _find_new_video_file(self, files_before: Dict[str, float], filename: str) -> Optional[str]:
        """Êü•ÊâæÊñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            files_after = self._get_comfyui_output_files()
            
            # ÊâæÂá∫Êñ∞Â¢ûÁöÑÊñá‰ª∂
            new_files = []
            for file_path, mtime in files_after.items():
                if file_path not in files_before:
                    # ÂÖ®Êñ∞Êñá‰ª∂
                    new_files.append((file_path, mtime, 'new'))
                elif mtime > files_before[file_path]:
                    # ‰øÆÊîπËøáÁöÑÊñá‰ª∂
                    new_files.append((file_path, mtime, 'modified'))
            
            if not new_files:
                print(f"‚úó Êú™ÊâæÂà∞Êñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂")
                return None
            
            print(f"ÊâæÂà∞ {len(new_files)} ‰∏™Êñ∞/‰øÆÊîπÁöÑÊñá‰ª∂:")
            for file_path, mtime, status in new_files:
                file_obj = Path(file_path)
                size = file_obj.stat().st_size / 1024 / 1024
                print(f"  {file_obj.name} ({size:.2f}MB, {status})")
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊñá‰ª∂ÔºàÊåâ‰øÆÊîπÊó∂Èó¥Ôºâ
            latest_file = max(new_files, key=lambda x: x[1])
            latest_path = Path(latest_file[0])
            
            # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
            file_size = latest_path.stat().st_size
            if file_size < 100 * 1024:  # Â∞è‰∫é100KB
                print(f"‚ö†Ô∏è ÊúÄÊñ∞Êñá‰ª∂Â§™Â∞è ({file_size/1024:.1f}KB)ÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                # Â∞ùËØïÊâæÊõ¥Â§ßÁöÑÊñá‰ª∂
                valid_files = [(f, m, s) for f, m, s in new_files if Path(f).stat().st_size > 100 * 1024]
                if valid_files:
                    # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂
                    latest_file = max(valid_files, key=lambda x: x[1])
                    latest_path = Path(latest_file[0])
                    print(f"‰ΩøÁî®ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂: {latest_path.name}")
            
            print(f"ÈÄâÊã©Êñá‰ª∂: {latest_path}")
            
            # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
            return self._copy_video_file(latest_path, filename)
            
        except Exception as e:
            print(f"Êü•ÊâæÊñ∞Êñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_video_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            # ÁõÆÊ†áË∑ØÂæÑ
            dest_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _encode_image_to_base64(self, image_path: str) -> str:
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
    
    def _find_latest_generated_image(self, filename: str) -> Optional[str]:
        """‰ªé ComfyUI ËæìÂá∫ÁõÆÂΩïÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                print(f"‚úó ComfyUI outputÁõÆÂΩï‰∏çÂ≠òÂú®: {comfyui_output_dir}")
                return None
            
            print(f"\n=== Êü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá ===")
            print(f"ÊêúÁ¥¢ÁõÆÂΩï: {comfyui_output_dir}")
            
            # Êü•ÊâæÊâÄÊúâÂõæÁâáÊñá‰ª∂
            image_files = []
            for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.webp']:
                found_files = list(comfyui_output_dir.glob(ext))
                image_files.extend(found_files)
                if found_files:
                    print(f"ÊâæÂà∞ {len(found_files)} ‰∏™ {ext} Êñá‰ª∂")
            
            if not image_files:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïÂõæÁâáÊñá‰ª∂")
                return None
            
            print(f"ÊÄªÂÖ±ÊâæÂà∞ {len(image_files)} ‰∏™ÂõæÁâáÊñá‰ª∂")
            
            # Êåâ‰øÆÊîπÊó∂Èó¥ÊéíÂ∫èÔºåÈÄâÊã©ÊúÄÊñ∞ÁöÑ
            image_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâáÔºàÂ§ß‰∫é50KBÔºâ
            for image_file in image_files[:5]:  # Âè™Ê£ÄÊü•ÊúÄÊñ∞ÁöÑ5‰∏™Êñá‰ª∂
                file_size = image_file.stat().st_size
                file_time = time.ctime(image_file.stat().st_mtime)
                print(f"Ê£ÄÊü•Êñá‰ª∂: {image_file.name} ({file_size/1024:.1f}KB, {file_time})")
                
                if file_size > 50 * 1024:  # Â§ß‰∫é50KB
                    print(f"‚úÖ ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâá: {image_file.name}")
                    
                    # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
                    return self._copy_image_file(image_file, filename)
            
            print(f"‚úó Êú™ÊâæÂà∞ÊúâÊïàÁöÑÂõæÁâáÊñá‰ª∂ÔºàÂ§ß‰∫é50KBÔºâ")
            return None
            
        except Exception as e:
            print(f"Êü•ÊâæÊúÄÊñ∞ÂõæÁâáÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_image_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ÂõæÁâáÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            print(f"\n=== Â§çÂà∂ÂõæÁâáÊñá‰ª∂ ===")
            print(f"Ê∫êÊñá‰ª∂: {source_path}")
            print(f"Ê∫êÊñá‰ª∂Â§ßÂ∞è: {source_path.stat().st_size/1024/1024:.2f}MB")
            
            # ÁõÆÊ†áË∑ØÂæÑ - ‰ΩøÁî®ÂéüÂßãÊâ©Â±ïÂêç
            dest_path = Config.STORYBOARD_DIR / f"{filename}{source_path.suffix}"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.STORYBOARD_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            print(f"ÂºÄÂßãÂ§çÂà∂Êñá‰ª∂...")
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ÂõæÁâá: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                print(f"=========================\n")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ÂõæÁâáÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None

    def _execute_workflow(self, workflow: Dict, filename: str) -> Optional[str]:
        """ÊâßË°åComfyUIÂ∑•‰ΩúÊµÅ"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # ‰øùÂ≠òËæìÂá∫Êñá‰ª∂
                saved_path = self._save_output(output_images, filename)
                if saved_path:
                    return saved_path
                else:
                    print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•ÔºåÂ∞ùËØï‰ªéËæìÂá∫ÁõÆÂΩïÊü•Êâæ...")
                    # Ê†πÊçÆfilenameÂà§Êñ≠ÊòØÈü≥È¢ëËøòÊòØÂõæÁâá
                    if filename.startswith('audio_'):
                        # Èü≥È¢ëÊñá‰ª∂ÔºåÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÈü≥È¢ë
                        return self._find_latest_generated_audio(filename)
                    else:
                        # ÂõæÁâáÊñá‰ª∂ÔºåÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá
                        return self._find_latest_generated_image(filename)
            
            return None
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂ§±Ë¥•: {str(e)}")
            return None
    
    def _queue_prompt(self, workflow: Dict) -> Optional[str]:
        """Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ÈòüÂàó"""
        try:
            prompt_data = {
                "prompt": workflow,
                "client_id": self.client_id
            }
            
            print(f"\n=== Êèê‰∫§Â∑•‰ΩúÊµÅÂà∞ComfyUI ===")
            print(f"Client ID: {self.client_id}")
            print(f"URL: {self.base_url}/prompt")
            print(f"Â∑•‰ΩúÊµÅËäÇÁÇπÊï∞Èáè: {len(workflow)}")
            
            # ÊòæÁ§∫Â∑•‰ΩúÊµÅÁöÑÂâçÂá†‰∏™ËäÇÁÇπ‰ø°ÊÅØ
            for i, (node_id, node_data) in enumerate(list(workflow.items())[:3]):
                print(f"Node {node_id}: {node_data.get('class_type', 'Unknown')}")
                if 'inputs' in node_data:
                    for key, value in list(node_data['inputs'].items())[:3]:
                        if isinstance(value, str) and len(value) > 50:
                            print(f"  {key}: {value[:50]}...")
                        else:
                            print(f"  {key}: {value}")
            
            response = requests.post(
                f"{self.base_url}/prompt",
                json=prompt_data,
                timeout=30
            )
            
            print(f"ÂìçÂ∫îÁä∂ÊÄÅÁ†Å: {response.status_code}")
            
            if response.status_code == 200:
                result = response.json()
                prompt_id = result.get("prompt_id")
                print(f"Prompt ID: {prompt_id}")
                print(f"=========================\n")
                return prompt_id
            else:
                print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                
                # Â∞ùËØïËß£ÊûêÈîôËØØ‰ø°ÊÅØ
                try:
                    error_data = response.json()
                    print(f"ÈîôËØØËØ¶ÊÉÖ: {json.dumps(error_data, indent=2, ensure_ascii=False)}")
                except:
                    print(f"Êó†Ê≥ïËß£ÊûêÈîôËØØÂìçÂ∫î")
                
                print(f"=========================\n")
                return None
                
        except Exception as e:
            print(f"Êèê‰∫§Â∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            print(f"=========================\n")
            return None
    
    def _wait_for_completion(self, prompt_id: str, timeout: int = 900) -> Optional[Dict]:
        """Á≠âÂæÖÂ∑•‰ΩúÊµÅÂÆåÊàê - Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥Âà∞15ÂàÜÈíü"""
        start_time = time.time()
        
        # Â¢ûÂä†ÂàùÂßãÁ≠âÂæÖÊó∂Èó¥ÔºåËÆ©ComfyUIÊúâÊó∂Èó¥ÂºÄÂßãÂ§ÑÁêÜ
        time.sleep(2)
        
        while time.time() - start_time < timeout:
            try:
                # Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅ
                response = requests.get(f"{self.base_url}/history/{prompt_id}", timeout=30)
                
                if response.status_code == 200:
                    history = response.json()
                    
                    if prompt_id in history:
                        # ‰ªªÂä°ÂÆåÊàê
                        outputs = history[prompt_id].get("outputs", {})
                        return outputs
                else:
                    print(f"ÈîôËØØÂìçÂ∫î: {response.text}")
                    return None
                
            except Exception as e:
                print(f"Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅÂºÇÂ∏∏: {str(e)}")
                return None
    
    def _save_output(self, output_images: Dict, filename: str) -> Optional[str]:
        """‰øùÂ≠òËæìÂá∫Êñá‰ª∂"""
        try:
            import base64
            
            print(f"\n=== ‰øùÂ≠òËæìÂá∫Êñá‰ª∂ ===")
            print(f"Êñá‰ª∂Âêç: {filename}")
            print(f"ËæìÂá∫ÂõæÁâáÊï∞Èáè: {len(output_images)}")
            
            if len(output_images) == 0:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïËæìÂá∫ÂõæÁâá")
                return None
            
            # ÈÄâÊã©Á¨¨‰∏Ä‰∏™ËæìÂá∫ÂõæÁâá
            output_image = output_images[0]
            image_data = output_image[0]
            image_format = output_image[1]
            image_name = output_image[2]
            
            print(f"ÈÄâÊã©ÂõæÁâá: {image_name}")
            print(f"ÂõæÁâáÊ†ºÂºè: {image_format}")
            
            # ÁîüÊàêÁõÆÊ†áË∑ØÂæÑ
            dest_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Ëß£Á†Åbase64Êï∞ÊçÆÂπ∂‰øùÂ≠òÊñá‰ª∂
            with open(dest_path, "wb") as output_file:
                output_file.write(base64.b64decode(image_data))
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäü‰øùÂ≠òËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂‰øùÂ≠òÂ§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"‰øùÂ≠òËæìÂá∫Êñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _get_comfyui_output_files(self) -> Dict[str, float]:
        """Ëé∑ÂèñComfyUI outputÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÊñá‰ª∂ÂèäÂÖ∂‰øÆÊîπÊó∂Èó¥"""
        try:
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                return {}
            
            files_info = {}
            # Ëé∑ÂèñÊâÄÊúâËßÜÈ¢ëÊñá‰ª∂
            for ext in ['*.mp4', '*.avi', '*.mov', '*.mkv']:
                for file_path in comfyui_output_dir.glob(ext):
                    files_info[str(file_path)] = file_path.stat().st_mtime
            
            return files_info
        except Exception as e:
            print(f"Ëé∑ÂèñÊñá‰ª∂ÂàóË°®Â§±Ë¥•: {str(e)}")
            return {}
    
    def _execute_workflow_with_file_tracking(self, workflow: Dict, filename: str, files_before: Dict[str, float]) -> Optional[str]:
        """ÊâßË°åComfyUIÂ∑•‰ΩúÊµÅÂπ∂Ë∑üË∏™Êñ∞ÁîüÊàêÁöÑÊñá‰ª∂"""
        try:
            # ÈòüÂàóÊèêÁ§∫
            prompt_id = self._queue_prompt(workflow)
            if not prompt_id:
                return None
            
            # Á≠âÂæÖÂÆåÊàê
            output_images = self._wait_for_completion(prompt_id)
            
            if output_images:
                # È¶ñÂÖàÂ∞ùËØïÈÄöËøáAPI‰øùÂ≠ò
                api_result = self._save_output(output_images, filename)
                if api_result:
                    return api_result
            
            # APIÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè
            print(f"‚ö†Ô∏è API‰øùÂ≠òÂ§±Ë¥•Ôºå‰ΩøÁî®Êñá‰ª∂Ë∑üË∏™ÊñπÂºè...")
            return self._find_new_video_file(files_before, filename)
            
        except Exception as e:
            print(f"ÊâßË°åÂ∑•‰ΩúÊµÅÂºÇÂ∏∏: {str(e)}")
            # Â¶ÇÊûúÊúâÂºÇÂ∏∏Ôºå‰πüÂ∞ùËØïÊñá‰ª∂Ë∑üË∏™
            return self._find_new_video_file(files_before, filename)
    
    def _find_new_video_file(self, files_before: Dict[str, float], filename: str) -> Optional[str]:
        """Êü•ÊâæÊñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            files_after = self._get_comfyui_output_files()
            
            # ÊâæÂá∫Êñ∞Â¢ûÁöÑÊñá‰ª∂
            new_files = []
            for file_path, mtime in files_after.items():
                if file_path not in files_before:
                    # ÂÖ®Êñ∞Êñá‰ª∂
                    new_files.append((file_path, mtime, 'new'))
                elif mtime > files_before[file_path]:
                    # ‰øÆÊîπËøáÁöÑÊñá‰ª∂
                    new_files.append((file_path, mtime, 'modified'))
            
            if not new_files:
                print(f"‚úó Êú™ÊâæÂà∞Êñ∞ÁîüÊàêÁöÑËßÜÈ¢ëÊñá‰ª∂")
                return None
            
            print(f"ÊâæÂà∞ {len(new_files)} ‰∏™Êñ∞/‰øÆÊîπÁöÑÊñá‰ª∂:")
            for file_path, mtime, status in new_files:
                file_obj = Path(file_path)
                size = file_obj.stat().st_size / 1024 / 1024
                print(f"  {file_obj.name} ({size:.2f}MB, {status})")
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊñá‰ª∂ÔºàÊåâ‰øÆÊîπÊó∂Èó¥Ôºâ
            latest_file = max(new_files, key=lambda x: x[1])
            latest_path = Path(latest_file[0])
            
            # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
            file_size = latest_path.stat().st_size
            if file_size < 100 * 1024:  # Â∞è‰∫é100KB
                print(f"‚ö†Ô∏è ÊúÄÊñ∞Êñá‰ª∂Â§™Â∞è ({file_size/1024:.1f}KB)ÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                # Â∞ùËØïÊâæÊõ¥Â§ßÁöÑÊñá‰ª∂
                valid_files = [(f, m, s) for f, m, s in new_files if Path(f).stat().st_size > 100 * 1024]
                if valid_files:
                    # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂
                    latest_file = max(valid_files, key=lambda x: x[1])
                    latest_path = Path(latest_file[0])
                    print(f"‰ΩøÁî®ÊúÄÊñ∞ÁöÑÊúâÊïàÊñá‰ª∂: {latest_path.name}")
            
            print(f"ÈÄâÊã©Êñá‰ª∂: {latest_path}")
            
            # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
            return self._copy_video_file(latest_path, filename)
            
        except Exception as e:
            print(f"Êü•ÊâæÊñ∞Êñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_video_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            # ÁõÆÊ†áË∑ØÂæÑ
            dest_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ËßÜÈ¢ë: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ËßÜÈ¢ëÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _encode_image_to_base64(self, image_path: str) -> str:
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
        """Â∞ÜÂõæÁâáÁºñÁ†Å‰∏∫base64"""
        try:
            with open(image_path, "rb") as image_file:
                encoded_string = base64.b64encode(image_file.read()).decode('utf-8')
                return encoded_string
        except Exception as e:
            print(f"ÂõæÁâáÁºñÁ†ÅÂ§±Ë¥•: {str(e)}")
            return ""
    
    def _find_latest_generated_image(self, filename: str) -> Optional[str]:
        """‰ªé ComfyUI ËæìÂá∫ÁõÆÂΩïÊü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá"""
        try:
            import time
            # Á≠âÂæÖ‰∏Ä‰∏ãËÆ©ComfyUIÂÆåÊàêÊñá‰ª∂ÂÜôÂÖ•
            time.sleep(2)
            
            comfyui_output_dir = Path("F:/ComfyUI_windows_portable/ComfyUI/output")
            if not comfyui_output_dir.exists():
                print(f"‚úó ComfyUI outputÁõÆÂΩï‰∏çÂ≠òÂú®: {comfyui_output_dir}")
                return None
            
            print(f"\n=== Êü•ÊâæÊúÄÊñ∞ÁîüÊàêÁöÑÂõæÁâá ===")
            print(f"ÊêúÁ¥¢ÁõÆÂΩï: {comfyui_output_dir}")
            
            # Êü•ÊâæÊâÄÊúâÂõæÁâáÊñá‰ª∂
            image_files = []
            for ext in ['*.jpg', '*.jpeg', '*.png', '*.bmp', '*.webp']:
                found_files = list(comfyui_output_dir.glob(ext))
                image_files.extend(found_files)
                if found_files:
                    print(f"ÊâæÂà∞ {len(found_files)} ‰∏™ {ext} Êñá‰ª∂")
            
            if not image_files:
                print(f"‚úó Êú™ÊâæÂà∞‰ªª‰ΩïÂõæÁâáÊñá‰ª∂")
                return None
            
            print(f"ÊÄªÂÖ±ÊâæÂà∞ {len(image_files)} ‰∏™ÂõæÁâáÊñá‰ª∂")
            
            # Êåâ‰øÆÊîπÊó∂Èó¥ÊéíÂ∫èÔºåÈÄâÊã©ÊúÄÊñ∞ÁöÑ
            image_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            # ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâáÔºàÂ§ß‰∫é50KBÔºâ
            for image_file in image_files[:5]:  # Âè™Ê£ÄÊü•ÊúÄÊñ∞ÁöÑ5‰∏™Êñá‰ª∂
                file_size = image_file.stat().st_size
                file_time = time.ctime(image_file.stat().st_mtime)
                print(f"Ê£ÄÊü•Êñá‰ª∂: {image_file.name} ({file_size/1024:.1f}KB, {file_time})")
                
                if file_size > 50 * 1024:  # Â§ß‰∫é50KB
                    print(f"‚úÖ ÈÄâÊã©ÊúÄÊñ∞ÁöÑÊúâÊïàÂõæÁâá: {image_file.name}")
                    
                    # Â§çÂà∂Âà∞È°πÁõÆÁõÆÂΩï
                    return self._copy_image_file(image_file, filename)
            
            print(f"‚úó Êú™ÊâæÂà∞ÊúâÊïàÁöÑÂõæÁâáÊñá‰ª∂ÔºàÂ§ß‰∫é50KBÔºâ")
            return None
            
        except Exception as e:
            print(f"Êü•ÊâæÊúÄÊñ∞ÂõæÁâáÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _copy_image_file(self, source_path: Path, filename: str) -> Optional[str]:
        """Â§çÂà∂ÂõæÁâáÊñá‰ª∂Âà∞È°πÁõÆÁõÆÂΩï"""
        try:
            import shutil
            
            print(f"\n=== Â§çÂà∂ÂõæÁâáÊñá‰ª∂ ===")
            print(f"Ê∫êÊñá‰ª∂: {source_path}")
            print(f"Ê∫êÊñá‰ª∂Â§ßÂ∞è: {source_path.stat().st_size/1024/1024:.2f}MB")
            
            # ÁõÆÊ†áË∑ØÂæÑ - ‰ΩøÁî®ÂéüÂßãÊâ©Â±ïÂêç
            dest_path = Config.STORYBOARD_DIR / f"{filename}{source_path.suffix}"
            print(f"ÁõÆÊ†áË∑ØÂæÑ: {dest_path}")
            
            # Á°Æ‰øùÁõÆÂΩïÂ≠òÂú®
            Config.STORYBOARD_DIR.mkdir(parents=True, exist_ok=True)
            
            # Â§çÂà∂Êñá‰ª∂
            print(f"ÂºÄÂßãÂ§çÂà∂Êñá‰ª∂...")
            shutil.copy2(source_path, dest_path)
            
            # Á≠âÂæÖ‰∏Ä‰∏ãÁ°Æ‰øùÂ§çÂà∂ÂÆåÊàê
            import time
            time.sleep(0.5)
            
            # È™åËØÅÊñá‰ª∂
            if dest_path.exists() and dest_path.stat().st_size > 0:
                file_size = dest_path.stat().st_size
                print(f"‚úÖ ÊàêÂäüÂ§çÂà∂ÂõæÁâá: {dest_path}")
                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                print(f"=========================\n")
                return str(dest_path)
            else:
                print(f"‚úó Êñá‰ª∂Â§çÂà∂Â§±Ë¥•ÊàñÊñá‰ª∂‰∏∫Á©∫")
                return None
                
        except Exception as e:
            print(f"Â§çÂà∂ÂõæÁâáÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None

    def generate_videos(self, image_paths: List[str], video_prompts: List[str], video_params: Dict = None) -> List[str]:
        """Â∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ëÁâáÊÆµ - ‰ΩøÁî®ÂàÜÊâπÂ§ÑÁêÜÈÅøÂÖçÂÜÖÂ≠òÊ∫¢Âá∫"""
        video_paths = []
        
        print(f"ÂºÄÂßãÁîüÊàê {len(image_paths)} ‰∏™ËßÜÈ¢ëÁâáÊÆµ...")
        if video_params:
            print(f"ËßÜÈ¢ëÂèÇÊï∞: {video_params}")
        
        # Ê£ÄÊü•ËæìÂÖ•ÂèÇÊï∞
        if len(image_paths) != len(video_prompts):
            print(f"‚ö†Ô∏è Ë≠¶ÂëäÔºöÂõæÁâáÊï∞Èáè({len(image_paths)})‰∏éÊèêÁ§∫ËØçÊï∞Èáè({len(video_prompts)})‰∏çÂåπÈÖç")
            min_count = min(len(image_paths), len(video_prompts))
            image_paths = image_paths[:min_count]
            video_prompts = video_prompts[:min_count]
            print(f"Ëá™Âä®Ë£ÅÂâ™Âà∞ {min_count} ‰∏™")
        
        success_count = 0
        
        # ‰ΩøÁî®Êõ¥Â∞èÁöÑÂàÜÊâπÂ§ÑÁêÜÔºåÊØèÊâπÂè™Â§ÑÁêÜ1‰∏™ËßÜÈ¢ë‰ª•ÈÅøÂÖçÂÜÖÂ≠òÈóÆÈ¢ò
        batch_size = 1
        max_retries = 3
        
        # Ê£ÄÊü•ComfyUIÊúçÂä°Áä∂ÊÄÅ
        if not self.check_connection():
            print("‚ùå ComfyUIÊúçÂä°Êú™ËøêË°åÔºåËØ∑ÂÖàÂêØÂä®ComfyUIÊúçÂä°")
            # Â∞ùËØïÊÅ¢Â§çÊúçÂä°
            if not self._attempt_service_recovery():
                # Â°´ÂÖÖÁªìÊûúÂàóË°®‰∏∫None
                return [None] * len(image_paths)
        
        # ÂàÜÊâπÂ§ÑÁêÜÊâÄÊúâËßÜÈ¢ë
        for batch_start in range(0, len(image_paths), batch_size):
            batch_end = min(batch_start + batch_size, len(image_paths))
            batch_images = image_paths[batch_start:batch_end]
            batch_prompts = video_prompts[batch_start:batch_end]
            
            print(f"\n=== Â§ÑÁêÜÊâπÊ¨° {batch_start//batch_size + 1}/{(len(image_paths)-1)//batch_size + 1} ===")
            
            # Â§ÑÁêÜÂΩìÂâçÊâπÊ¨°
            for i, (image_path, prompt) in enumerate(zip(batch_images, batch_prompts)):
                try:
                    print(f"\n--- Â§ÑÁêÜÊâπÊ¨°ÂÜÖÁ¨¨{i+1}‰∏™ËßÜÈ¢ë ---")
                    print(f"Ê∫êÂõæÁâá: {image_path}")
                    print(f"ËßÜÈ¢ëÊèêÁ§∫ËØç: {prompt}")
                    
                    # Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê
                    self._check_system_resources()
                    
                    # Ê£ÄÊü•ÂõæÁâáÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
                    if not image_path or not Path(image_path).exists():
                        print(f"‚ùå ÂõæÁâáÊñá‰ª∂‰∏çÂ≠òÂú®ÔºåË∑≥Ëøá: {image_path}")
                        video_paths.append(None)
                        continue
                    
                    # ÁîüÊàêÂîØ‰∏ÄÁöÑËßÜÈ¢ëÊñá‰ª∂ÂêçÔºöÂõæÁâáÂêç + Á≤æÁ°ÆÊó∂Èó¥Êà≥
                    image_name = Path(image_path).stem  # ‰∏çÂ∏¶Êâ©Â±ïÂêçÁöÑÊñá‰ª∂Âêç
                    import time as time_module  # ÈÅøÂÖçÂèòÈáèÂêçÂÜ≤Á™Å
                    # ‰ΩøÁî®Êõ¥Á≤æÁ°ÆÁöÑÊó∂Èó¥Êà≥Âä†ÈöèÊú∫Êï∞Á°Æ‰øùÂîØ‰∏ÄÊÄß
                    timestamp = int(time_module.time() * 1000000)  # ÂæÆÁßíÁ∫ßÊó∂Èó¥Êà≥
                    import uuid
                    unique_id = str(uuid.uuid4())[:8]  # 8‰ΩçÈöèÊú∫Â≠óÁ¨¶
                    video_filename = f"{image_name}_{timestamp}_{unique_id}"
                    
                    print(f"ÁîüÊàêÂîØ‰∏ÄËßÜÈ¢ëÊñá‰ª∂Âêç: {video_filename}")
                    print(f"Êó∂Èó¥Êà≥: {timestamp}, UUIDÂâçÁºÄ: {unique_id}")
                    
                    # ÈáçËØïÊú∫Âà∂
                    video_path = None
                    last_error = None
                    
                    for retry in range(max_retries):
                        try:
                            # Ê£ÄÊü•ComfyUIÊúçÂä°Áä∂ÊÄÅ
                            if not self.check_connection():
                                print("‚ùå ComfyUIÊúçÂä°ËøûÊé•Â§±Ë¥•")
                                if not self._attempt_service_recovery():
                                    last_error = "ComfyUIÊúçÂä°Êó†Ê≥ïËøûÊé•"
                                    break
                            
                            if retry > 0:
                                print(f"üîÑ Á¨¨{retry}Ê¨°ÈáçËØï (ÂÖ±{max_retries-1}Ê¨°)...")
                                # ÈáçËØïÂâçÁ≠âÂæÖÊõ¥ÈïøÊó∂Èó¥
                                wait_time = 15 * retry  # ÈÄíÂ¢ûÁ≠âÂæÖÊó∂Èó¥
                                print(f"‚è≥ Á≠âÂæÖ {wait_time} ÁßíÂêéÈáçËØï...")
                                time_module.sleep(wait_time)
                            
                            # Âä†ËΩΩËßÜÈ¢ëÁîüÊàêÂ∑•‰ΩúÊµÅ
                            workflow = self.load_workflow(Config.VIDEO_WORKFLOW)
                            
                            # ‰øÆÊîπÂ∑•‰ΩúÊµÅÔºå‰º†ÈÄíËßÜÈ¢ëÂèÇÊï∞
                            workflow = self._update_video_workflow(workflow, image_path, prompt, video_params)
                            
                            # ÊâßË°åÂ∑•‰ΩúÊµÅ
                            video_path = self._execute_workflow_simple(workflow, video_filename, timestamp)
                            
                            if video_path and Path(video_path).exists():
                                # Ê£ÄÊü•Êñá‰ª∂Â§ßÂ∞è
                                file_size = Path(video_path).stat().st_size
                                print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size / (1024*1024):.2f} MB")
                                
                                if file_size >= 1024:  # Â§ß‰∫é1KBÊâçËÆ§‰∏∫ÊàêÂäü
                                    break  # ÊàêÂäüÔºåË∑≥Âá∫ÈáçËØïÂæ™ÁéØ
                                else:
                                    print(f"‚ö†Ô∏è Ë≠¶ÂëäÔºöËßÜÈ¢ëÊñá‰ª∂Â§™Â∞èÔºåÂèØËÉΩÁîüÊàêÂ§±Ë¥•")
                                    last_error = "ËßÜÈ¢ëÊñá‰ª∂Â§™Â∞è"
                            else:
                                last_error = "ËßÜÈ¢ëÊñá‰ª∂Êú™ÁîüÊàê"
                                
                        except Exception as e:
                            last_error = str(e)
                            print(f"‚ùå ÁîüÊàêËßÜÈ¢ëÁâáÊÆµÂºÇÂ∏∏ (Â∞ùËØï{retry+1}/{max_retries}): {str(e)}")
                            if retry < max_retries - 1:  # ‰∏çÊòØÊúÄÂêé‰∏ÄÊ¨°Â∞ùËØï
                                print("Á≠âÂæÖComfyUIÊúçÂä°ÊÅ¢Â§ç...")
                                # ÈáçËØïÂâçÁ≠âÂæÖÊõ¥ÈïøÊó∂Èó¥
                                wait_time = 20 * (retry + 1)  # ÈÄíÂ¢ûÁ≠âÂæÖÊó∂Èó¥
                                print(f"‚è≥ Á≠âÂæÖ {wait_time} ÁßíÂêéÈáçËØï...")
                                time_module.sleep(wait_time)
                    
                    if video_path and Path(video_path).exists():
                        video_paths.append(video_path)
                        success_count += 1
                        print(f"‚úÖ ËßÜÈ¢ëÁâáÊÆµÁîüÊàêÊàêÂäü: {video_path}")
                    else:
                        print(f"‚ùå ËßÜÈ¢ëÁâáÊÆµÁîüÊàêÂ§±Ë¥•: {last_error}")
                        video_paths.append(None)
                        
                except Exception as e:
                    print(f"‚ùå Â§ÑÁêÜËßÜÈ¢ëÁâáÊÆµÂºÇÂ∏∏: {str(e)}")
                    import traceback
                    traceback.print_exc()
                    video_paths.append(None)
                
                # ÊØèÂ§ÑÁêÜ‰∏Ä‰∏™ËßÜÈ¢ëÂêéÁ≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ÔºåËÆ©ComfyUIÈáäÊîæËµÑÊ∫ê
                if i < len(batch_images) - 1:  # ‰∏çÊòØÊâπÊ¨°ÂÜÖÊúÄÂêé‰∏Ä‰∏™ËßÜÈ¢ë
                    print("‚è≥ Á≠âÂæÖComfyUIÈáäÊîæËµÑÊ∫ê...")
                    time_module.sleep(5)
                    
                    # Âº∫Âà∂ÂûÉÂúæÂõûÊî∂
                    gc.collect()
            
            # ÊâπÊ¨°Èó¥Á≠âÂæÖÔºåËÆ©ComfyUIÂÖÖÂàÜÈáäÊîæËµÑÊ∫ê
            if batch_end < len(image_paths):
                print("‚è≥ ÊâπÊ¨°Èó¥Á≠âÂæÖÔºåËÆ©ComfyUIÂÖÖÂàÜÈáäÊîæËµÑÊ∫ê...")
                wait_time = 10 + (batch_start//batch_size) * 5  # ÈÄíÂ¢ûÁ≠âÂæÖÊó∂Èó¥
                time_module.sleep(wait_time)
                
                # Âº∫Âà∂ÂûÉÂúæÂõûÊî∂
                gc.collect()
                
                # Ê£ÄÊü•Á≥ªÁªüËµÑÊ∫ê
                self._check_system_resources()
                
                # È¢ùÂ§ñÁöÑComfyUIÊúçÂä°ÂÅ•Â∫∑Ê£ÄÊü•
                if not self.check_connection():
                    print("‚ö†Ô∏è ComfyUIÊúçÂä°ËøûÊé•Êñ≠ÂºÄÔºåÂ∞ùËØïÈáçÊñ∞ËøûÊé•...")
                    if not self._attempt_service_recovery():
                        print("‚ùå Êó†Ê≥ïÈáçÊñ∞ËøûÊé•Âà∞ComfyUIÊúçÂä°ÔºåÁªàÊ≠¢ËßÜÈ¢ëÁîüÊàê")
                        # Â∞ÜÂâ©‰ΩôÊú™Â§ÑÁêÜÁöÑËßÜÈ¢ëË∑ØÂæÑÂ°´ÂÖÖ‰∏∫None
                        remaining_count = len(image_paths) - len(video_paths)
                        video_paths.extend([None] * remaining_count)
                        break
        
        print(f"\n=== ËßÜÈ¢ëÁîüÊàêÊÄªÁªì ===")
        print(f"ÊàêÂäüÁîüÊàê: {success_count}/{len(image_paths)} ‰∏™ËßÜÈ¢ëÁâáÊÆµ")
        
        if success_count == 0:
            print(f"‚ùå ÊâÄÊúâËßÜÈ¢ëÁîüÊàêÂ§±Ë¥•ÔºÅ")
        elif success_count < len(image_paths):
            print(f"‚ö†Ô∏è ÈÉ®ÂàÜÊàêÂäüÔºö{len(image_paths) - success_count}‰∏™ËßÜÈ¢ëÁîüÊàêÂ§±Ë¥•")
        else:
            print(f"üéâ ÊâÄÊúâËßÜÈ¢ëÁîüÊàêÊàêÂäüÔºÅ")
        
        return video_paths

    def _wait_for_completion(self, prompt_id: str, timeout: int = 900) -> Optional[Dict]:
        """Á≠âÂæÖÂ∑•‰ΩúÊµÅÂÆåÊàê - Â¢ûÂä†Ë∂ÖÊó∂Êó∂Èó¥Âà∞15ÂàÜÈíü"""
        start_time = time.time()
        
        # Â¢ûÂä†ÂàùÂßãÁ≠âÂæÖÊó∂Èó¥ÔºåËÆ©ComfyUIÊúâÊó∂Èó¥ÂºÄÂßãÂ§ÑÁêÜ
        time.sleep(2)
        
        while time.time() - start_time < timeout:
            try:
                # Ê£ÄÊü•ÈòüÂàóÁä∂ÊÄÅ
                response = requests.get(f"{self.base_url}/history/{prompt_id}", timeout=30)
                
                if response.status_code == 200:
                    history = response.json()
                    
                    if prompt_id in history:
                        # ‰ªªÂä°ÂÆåÊàê
                        outputs = history[prompt_id].get("outputs", {})
                        return outputs
                
                # ÈÄêÊ∏êÂ¢ûÂä†Á≠âÂæÖÊó∂Èó¥ÔºåÈÅøÂÖçÈ¢ëÁπÅËØ∑Ê±Ç
                elapsed = time.time() - start_time
                if elapsed < 60:
                    time.sleep(3)  # Ââç1ÂàÜÈíüÊØè3ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
                elif elapsed < 300:
                    time.sleep(5)  # 1-5ÂàÜÈíüÊØè5ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
                else:
                    time.sleep(10)  # 5ÂàÜÈíüÂêéÊØè10ÁßíÊ£ÄÊü•‰∏ÄÊ¨°
                
            except Exception as e:
                print(f"Ê£ÄÊü•Áä∂ÊÄÅÂºÇÂ∏∏: {str(e)}")
                time.sleep(5)
        
        print(f"Â∑•‰ΩúÊµÅÊâßË°åË∂ÖÊó∂ ({timeout}Áßí)")
        return None

    def _save_output(self, outputs: Dict, filename: str) -> Optional[str]:
        """‰øùÂ≠òËæìÂá∫Êñá‰ª∂"""
        try:
            print(f"\n=== ‰øùÂ≠òComfyUIËæìÂá∫ ===")
            print(f"Êñá‰ª∂Âêç: {filename}")
            print(f"ËæìÂá∫ËäÇÁÇπ: {list(outputs.keys())}")
            
            # ÊòæÁ§∫ËæìÂá∫ËØ¶ÊÉÖ
            video_combine_node = None  # ËßÜÈ¢ëÂêàÂπ∂ËäÇÁÇπÔºàÈÄöÂ∏∏ÊòØËäÇÁÇπ13Ôºâ
            
            for node_id, node_output in outputs.items():
                print(f"Node {node_id}: {list(node_output.keys())}")
                
                # Ê£ÄÊü•ËäÇÁÇπ13ÔºàVHS_VideoCombineÔºâÁöÑËæìÂá∫
                if node_id == "13":
                    video_combine_node = (node_id, node_output)
                    print(f"  üé¨ ÂèëÁé∞ËßÜÈ¢ëÂêàÂπ∂ËäÇÁÇπ (Node 13)")
                    
                    if "gifs" in node_output:
                        print(f"  GIFÊï∞Èáè: {len(node_output['gifs'])}")
                        for i, gif_info in enumerate(node_output['gifs']):
                            print(f"    GIF {i+1}: {gif_info}")
                    
                    if "videos" in node_output:
                        print(f"  ËßÜÈ¢ëÊï∞Èáè: {len(node_output['videos'])}")
                        for i, video_info in enumerate(node_output['videos']):
                            print(f"    ËßÜÈ¢ë {i+1}: {video_info}")
                
                elif "videos" in node_output:
                    print(f"  ËßÜÈ¢ëÊï∞Èáè: {len(node_output['videos'])}")
                    for i, video_info in enumerate(node_output['videos']):
                        print(f"    ËßÜÈ¢ë {i+1}: {video_info}")
                elif "gifs" in node_output:
                    print(f"  GIFÊï∞Èáè: {len(node_output['gifs'])}")
                    for i, gif_info in enumerate(node_output['gifs']):
                        print(f"    GIF {i+1}: {gif_info}")
                elif "images" in node_output:
                    print(f"  ÂõæÁâáÊï∞Èáè: {len(node_output['images'])}")
                elif "audio" in node_output:
                    print(f"  üéß Èü≥È¢ëËäÇÁÇπ (Node {node_id})")
                    print(f"  Èü≥È¢ëÊï∞Èáè: {len(node_output['audio'])}")
                    for i, audio_info in enumerate(node_output['audio']):
                        print(f"    Èü≥È¢ë {i+1}: {audio_info}")
            
            # ‰ºòÂÖàÂ§ÑÁêÜSaveAudioMP3ËäÇÁÇπÔºàNode 2ÔºâÁöÑÈü≥È¢ëËæìÂá∫
            save_audio_node = None
            preview_audio_nodes = []
            
            for node_id, node_output in outputs.items():
                if "audio" in node_output:
                    if node_id == "2":  # SaveAudioMP3ËäÇÁÇπ
                        save_audio_node = (node_id, node_output)
                        print(f"üéß ÂèëÁé∞SaveAudioMP3ËäÇÁÇπ (Node {node_id})")
                    else:
                        preview_audio_nodes.append((node_id, node_output))
                        print(f"üéß ÂèëÁé∞ÂÖ∂‰ªñÈü≥È¢ëËäÇÁÇπ (Node {node_id})")
            
            # ‰ºòÂÖàÂ§ÑÁêÜSaveAudioMP3ËäÇÁÇπÁöÑËæìÂá∫ÔºàËøôÊòØÁúüÊ≠£ÁöÑTTSÁîüÊàêÈü≥È¢ëÔºâ
            if save_audio_node:
                node_id, node_output = save_audio_node
                print(f"üéß ‰ºòÂÖàÂ§ÑÁêÜSaveAudioMP3 Node {node_id}ÁöÑaudioËæìÂá∫...")
                for audio_info in node_output["audio"]:
                    print(f"  Èü≥È¢ëÊñá‰ª∂: {audio_info['filename']} (subfolder: {audio_info.get('subfolder', 'None')})")
                    result = self._download_and_save_audio(audio_info, filename)
                    if result:
                        print(f"‚úÖ SaveAudioMP3ËäÇÁÇπÈü≥È¢ëÂ§ÑÁêÜÊàêÂäü: {result}")
                        return result
            
            # Â¶ÇÊûúSaveAudioMP3ËäÇÁÇπÂ§±Ë¥•ÔºåÊâçÂ§ÑÁêÜÂÖ∂‰ªñÈü≥È¢ëËäÇÁÇπ
            for node_id, node_output in preview_audio_nodes:
                print(f"üéß Â§áÁî®ÊñπÊ°àÔºöÂ§ÑÁêÜNode {node_id}ÁöÑaudioËæìÂá∫...")
                for audio_info in node_output["audio"]:
                    print(f"  Èü≥È¢ëÊñá‰ª∂: {audio_info['filename']} (subfolder: {audio_info.get('subfolder', 'None')})")
                    if audio_info.get('type') == 'temp':
                        print(f"  ‚ö†Ô∏è Ë∑≥Ëøá‰∏¥Êó∂Êñá‰ª∂ÔºåÂèØËÉΩÊòØÂèÇËÄÉÈü≥È¢ë: {audio_info['filename']}")
                        continue
                    result = self._download_and_save_audio(audio_info, filename)
                    if result:
                        return result
            if video_combine_node:
                node_id, node_output = video_combine_node
                
                # ÂÖàÊ£ÄÊü•ÊòØÂê¶ÊúâÊ†áÂáÜÁöÑvideosËæìÂá∫
                if "videos" in node_output:
                    print(f"üé¨ Â§ÑÁêÜNode 13ÁöÑvideosËæìÂá∫...")
                    for video_info in node_output["videos"]:
                        result = self._download_and_save_video(video_info, filename)
                        if result:
                            return result
                
                # Â¶ÇÊûúÊ≤°ÊúâvideosÔºåÊ£ÄÊü•gifsÔºàVHS_VideoCombineÂèØËÉΩËæìÂá∫gifÊ†ºÂºèÔºâ
                elif "gifs" in node_output:
                    print(f"üé¨ Â§ÑÁêÜNode 13ÁöÑgifsËæìÂá∫ÔºàÂèØËÉΩÊòØËßÜÈ¢ëÊñá‰ª∂Ôºâ...")
                    for gif_info in node_output["gifs"]:
                        # Ê£ÄÊü•Êñá‰ª∂ÂêçÁöÑÊâ©Â±ïÂêç
                        filename_lower = gif_info["filename"].lower()
                        if filename_lower.endswith(('.mp4', '.avi', '.mov', '.mkv')):
                            print(f"‚úÖ Ê£ÄÊµãÂà∞ËßÜÈ¢ëÊ†ºÂºè: {gif_info['filename']}")
                            result = self._download_and_save_video(gif_info, filename, is_video=True)
                        else:
                            print(f"‚ö†Ô∏è Ê£ÄÊµãÂà∞GIFÊ†ºÂºè: {gif_info['filename']}")
                            result = self._download_and_convert_gif(gif_info, filename)
                        
                        if result:
                            return result
            
            # Â§ÑÁêÜÂÖ∂‰ªñËäÇÁÇπÁöÑËßÜÈ¢ëËæìÂá∫
            for node_id, node_output in outputs.items():
                if node_id != "13" and "videos" in node_output:
                    print(f"üé¨ Â§ÑÁêÜNode {node_id}ÁöÑvideosËæìÂá∫...")
                    for video_info in node_output["videos"]:
                        result = self._download_and_save_video(video_info, filename)
                        if result:
                            return result
            
            print(f"‚ùå Êó†Ê≥ïÈÄöËøáAPI‰∏ãËΩΩ‰ªª‰ΩïÊñá‰ª∂")
            return None
            
        except Exception as e:
            print(f"‰øùÂ≠òÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _download_and_save_video(self, video_info: Dict, filename: str, is_video: bool = True) -> Optional[str]:
        """‰∏ãËΩΩÂπ∂‰øùÂ≠òËßÜÈ¢ëÊñá‰ª∂"""
        try:
            video_url = f"{self.base_url}/view"
            params = {
                "filename": video_info["filename"],
                "subfolder": video_info.get("subfolder", ""),
                "type": video_info.get("type", "output")
            }
            
            print(f"Â∞ùËØï‰∏ãËΩΩ{'ËßÜÈ¢ë' if is_video else 'GIF'}: {video_info['filename']}")
            response = requests.get(video_url, params=params, timeout=30)
            
            if response.status_code == 200:
                # Áõ¥Êé•‰øùÂ≠ò‰∏∫MP4Ê†ºÂºè
                save_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
                Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
                
                with open(save_path, "wb") as f:
                    f.write(response.content)
                
                # È™åËØÅÊñá‰ª∂
                if save_path.exists() and save_path.stat().st_size > 0:
                    file_size = save_path.stat().st_size
                    print(f"‚úÖ {'ËßÜÈ¢ë' if is_video else 'GIF'}‰∏ãËΩΩÊàêÂäü: {save_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    return str(save_path)
                else:
                    print(f"‚úó ‰∏ãËΩΩÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó ‰∏ãËΩΩÂ§±Ë¥•: HTTP {response.status_code}")
            
            return None
            
        except Exception as e:
            print(f"‰∏ãËΩΩÊñá‰ª∂ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _download_and_convert_gif(self, gif_info: Dict, filename: str) -> Optional[str]:
        """‰∏ãËΩΩGIFÂπ∂ËΩ¨Êç¢‰∏∫MP4"""
        try:
            gif_url = f"{self.base_url}/view"
            params = {
                "filename": gif_info["filename"],
                "subfolder": gif_info.get("subfolder", ""),
                "type": gif_info.get("type", "output")
            }
            
            print(f"Â∞ùËØï‰∏ãËΩΩGIF: {gif_info['filename']}")
            response = requests.get(gif_url, params=params, timeout=30)
            
            if response.status_code == 200:
                # ÂÖà‰øùÂ≠òGIFÊñá‰ª∂
                temp_gif_path = Config.TEMP_DIR / f"temp_{filename}.gif"
                Config.TEMP_DIR.mkdir(parents=True, exist_ok=True)
                
                with open(temp_gif_path, "wb") as f:
                    f.write(response.content)
                
                print(f"‚úÖ GIF‰∏ãËΩΩÊàêÂäü: {temp_gif_path}")
                
                # Â∞ùËØïËΩ¨Êç¢‰∏∫MP4
                return self._convert_gif_to_mp4(temp_gif_path, filename)
            else:
                print(f"‚úó GIF‰∏ãËΩΩÂ§±Ë¥•: HTTP {response.status_code}")
            
            return None
            
        except Exception as e:
            print(f"‰∏ãËΩΩGIFÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _download_and_save_audio(self, audio_info: Dict, filename: str) -> Optional[str]:
        """‰∏ãËΩΩÂπ∂‰øùÂ≠òÈü≥È¢ëÊñá‰ª∂"""
        try:
            audio_url = f"{self.base_url}/view"
            params = {
                "filename": audio_info["filename"],
                "subfolder": audio_info.get("subfolder", ""),
                "type": audio_info.get("type", "output")
            }
            
            print(f"Â∞ùËØï‰∏ãËΩΩÈü≥È¢ë: {audio_info['filename']}")
            response = requests.get(audio_url, params=params, timeout=30)
            
            if response.status_code == 200:
                # ‰øùÂ≠ò‰∏∫Èü≥È¢ëÊñá‰ª∂
                save_path = Config.AUDIO_DIR / f"{filename}.wav"
                Config.AUDIO_DIR.mkdir(parents=True, exist_ok=True)
                
                with open(save_path, "wb") as f:
                    f.write(response.content)
                
                # È™åËØÅÊñá‰ª∂
                if save_path.exists() and save_path.stat().st_size > 0:
                    file_size = save_path.stat().st_size
                    print(f"‚úÖ Èü≥È¢ë‰∏ãËΩΩÊàêÂäü: {save_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    return str(save_path)
                else:
                    print(f"‚úó ‰∏ãËΩΩÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó ‰∏ãËΩΩÂ§±Ë¥•: HTTP {response.status_code}")
            
            return None
            
        except Exception as e:
            print(f"‰∏ãËΩΩÈü≥È¢ëÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _convert_gif_to_mp4(self, gif_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜGIFËΩ¨Êç¢‰∏∫MP4ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜGIFËΩ¨Êç¢‰∏∫MP4...")
            print(f"Ê∫êÊñá‰ª∂: {gif_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegËΩ¨Êç¢GIF‰∏∫MP4
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-i', str(gif_path),  # ËæìÂÖ•GIFÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                '-crf', '19',  # Ë¥®ÈáèÂèÇÊï∞
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ GIFËΩ¨MP4ÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂GIFÊñá‰ª∂
                    try:
                        gif_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂GIFÊñá‰ª∂: {gif_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
                
                # Â¶ÇÊûúFFmpegÂ§±Ë¥•ÔºåÂ∞ùËØïÁõ¥Êé•ÈáçÂëΩÂêçGIF‰∏∫MP4Ôºà‰Ωú‰∏∫Â§áÁî®ÊñπÊ°àÔºâ
                print(f"‚ö†Ô∏è Â∞ùËØïÂ§áÁî®ÊñπÊ°àÔºöÁõ¥Êé•ÈáçÂëΩÂêçGIF‰∏∫MP4...")
                try:
                    import shutil
                    shutil.copy2(gif_path, output_path)
                    if output_path.exists():
                        print(f"‚úÖ Â§áÁî®ÊñπÊ°àÊàêÂäü: {output_path}")
                        return str(output_path)
                except Exception as e:
                    print(f"‚úó Â§áÁî®ÊñπÊ°à‰πüÂ§±Ë¥•: {str(e)}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpegÔºåÂ∞ùËØïÂ§áÁî®ÊñπÊ°à...")
            # Â§áÁî®ÊñπÊ°àÔºöÁõ¥Êé•Â§çÂà∂Êñá‰ª∂
            try:
                import shutil
                output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
                shutil.copy2(gif_path, output_path)
                if output_path.exists():
                    print(f"‚úÖ Â§áÁî®ÊñπÊ°àÂ§çÂà∂ÊàêÂäü: {output_path}")
                    return str(output_path)
            except Exception as e:
                print(f"‚úó Â§áÁî®ÊñπÊ°àÂ§çÂà∂Â§±Ë¥•: {str(e)}")
            return None
        except Exception as e:
            print(f"ËΩ¨GIF‰∏∫MP4ÂºÇÂ∏∏: {str(e)}")
            return None
    
    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None

    def _convert_image_to_video(self, image_path: Path, filename: str) -> Optional[str]:
        """Â∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë"""
        try:
            import subprocess
            
            output_path = Config.VIDEO_CLIPS_DIR / f"{filename}.mp4"
            Config.VIDEO_CLIPS_DIR.mkdir(parents=True, exist_ok=True)
            
            print(f"Â∞ùËØï‰ΩøÁî®FFmpegÂ∞ÜÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë...")
            print(f"Ê∫êÊñá‰ª∂: {image_path}")
            print(f"ÁõÆÊ†áÊñá‰ª∂: {output_path}")
            
            # ‰ΩøÁî®FFmpegÂ∞ÜÈùôÊÄÅÂõæÁâáËΩ¨Êç¢‰∏∫ËßÜÈ¢ë
            cmd = [
                'ffmpeg', '-y',  # -y Ë¶ÜÁõñËæìÂá∫Êñá‰ª∂
                '-loop', '1',  # Âæ™ÁéØÊí≠ÊîæÂõæÁâá
                '-i', str(image_path),  # ËæìÂÖ•ÂõæÁâáÊñá‰ª∂
                '-c:v', 'libx264',  # ‰ΩøÁî®H.264ÁºñÁ†Å
                '-t', '5',  # ËßÜÈ¢ëÊó∂Èïø5Áßí
                '-pix_fmt', 'yuv420p',  # ÂÉèÁ¥†Ê†ºÂºè
                '-r', '18',  # Â∏ßÁéá
                str(output_path)
            ]
            
            result = subprocess.run(
                cmd,
                capture_output=True,
                text=True,
                timeout=60
            )
            
            if result.returncode == 0:
                if output_path.exists() and output_path.stat().st_size > 0:
                    file_size = output_path.stat().st_size
                    print(f"‚úÖ ÂõæÁâáËΩ¨ËßÜÈ¢ëÊàêÂäü: {output_path}")
                    print(f"Êñá‰ª∂Â§ßÂ∞è: {file_size/1024/1024:.2f}MB")
                    
                    # Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂
                    try:
                        image_path.unlink()
                        print(f"‚úÖ Ê∏ÖÁêÜ‰∏¥Êó∂ÂõæÁâáÊñá‰ª∂: {image_path}")
                    except Exception as e:
                        print(f"‚ö†Ô∏è Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂Â§±Ë¥•: {str(e)}")
                    
                    return str(output_path)
                else:
                    print(f"‚úó ËΩ¨Êç¢ÂêéÁöÑÊñá‰ª∂‰∏∫Á©∫Êàñ‰∏çÂ≠òÂú®")
            else:
                print(f"‚úó FFmpegËΩ¨Êç¢Â§±Ë¥•")
                print(f"ÈîôËØØ‰ø°ÊÅØ: {result.stderr}")
            
            return None
            
        except subprocess.TimeoutExpired:
            print(f"‚úó FFmpegËΩ¨Êç¢Ë∂ÖÊó∂")
            return None
        except FileNotFoundError:
            print(f"‚úó Êâæ‰∏çÂà∞FFmpeg")
            return None
        except Exception as e:
            print(f"ÂõæÁâáËΩ¨ËßÜÈ¢ëÂºÇÂ∏∏: {str(e)}")
            return None